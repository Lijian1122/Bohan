// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Group.proto

#include "Group.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Bohan {
namespace Group {
PROTOBUF_CONSTEXPR NormalGroupListReq::NormalGroupListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct NormalGroupListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NormalGroupListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NormalGroupListReqDefaultTypeInternal() {}
  union {
    NormalGroupListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NormalGroupListReqDefaultTypeInternal _NormalGroupListReq_default_instance_;
PROTOBUF_CONSTEXPR NormalGroupListRsp::NormalGroupListRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_version_list_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct NormalGroupListRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NormalGroupListRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NormalGroupListRspDefaultTypeInternal() {}
  union {
    NormalGroupListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NormalGroupListRspDefaultTypeInternal _NormalGroupListRsp_default_instance_;
PROTOBUF_CONSTEXPR GroupInfoListReq::GroupInfoListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_version_list_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GroupInfoListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupInfoListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupInfoListReqDefaultTypeInternal() {}
  union {
    GroupInfoListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupInfoListReqDefaultTypeInternal _GroupInfoListReq_default_instance_;
PROTOBUF_CONSTEXPR GroupInfoListRsp::GroupInfoListRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_info_list_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GroupInfoListRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupInfoListRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupInfoListRspDefaultTypeInternal() {}
  union {
    GroupInfoListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupInfoListRspDefaultTypeInternal _GroupInfoListRsp_default_instance_;
PROTOBUF_CONSTEXPR GroupCreateReq::GroupCreateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.member_id_list_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_type_)*/1} {}
struct GroupCreateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupCreateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupCreateReqDefaultTypeInternal() {}
  union {
    GroupCreateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupCreateReqDefaultTypeInternal _GroupCreateReq_default_instance_;
PROTOBUF_CONSTEXPR GroupCreateRsp::GroupCreateRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_id_list_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_.group_id_)*/0u} {}
struct GroupCreateRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupCreateRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupCreateRspDefaultTypeInternal() {}
  union {
    GroupCreateRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupCreateRspDefaultTypeInternal _GroupCreateRsp_default_instance_;
PROTOBUF_CONSTEXPR GroupChangeMemberReq::GroupChangeMemberReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.member_id_list_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.change_type_)*/0
  , /*decltype(_impl_.group_id_)*/0u} {}
struct GroupChangeMemberReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupChangeMemberReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupChangeMemberReqDefaultTypeInternal() {}
  union {
    GroupChangeMemberReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupChangeMemberReqDefaultTypeInternal _GroupChangeMemberReq_default_instance_;
PROTOBUF_CONSTEXPR GroupChangeMemberRsp::GroupChangeMemberRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cur_user_id_list_)*/{}
  , /*decltype(_impl_.chg_user_id_list_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.change_type_)*/0
  , /*decltype(_impl_.result_code_)*/0u
  , /*decltype(_impl_.group_id_)*/0u} {}
struct GroupChangeMemberRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupChangeMemberRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupChangeMemberRspDefaultTypeInternal() {}
  union {
    GroupChangeMemberRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupChangeMemberRspDefaultTypeInternal _GroupChangeMemberRsp_default_instance_;
PROTOBUF_CONSTEXPR GroupShieldReq::GroupShieldReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.shield_status_)*/0u} {}
struct GroupShieldReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupShieldReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupShieldReqDefaultTypeInternal() {}
  union {
    GroupShieldReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupShieldReqDefaultTypeInternal _GroupShieldReq_default_instance_;
PROTOBUF_CONSTEXPR GroupShieldRsp::GroupShieldRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attach_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.result_code_)*/0u} {}
struct GroupShieldRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupShieldRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupShieldRspDefaultTypeInternal() {}
  union {
    GroupShieldRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupShieldRspDefaultTypeInternal _GroupShieldRsp_default_instance_;
PROTOBUF_CONSTEXPR GroupChangeMemberNotify::GroupChangeMemberNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cur_user_id_list_)*/{}
  , /*decltype(_impl_.chg_user_id_list_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.change_type_)*/0
  , /*decltype(_impl_.group_id_)*/0u} {}
struct GroupChangeMemberNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupChangeMemberNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupChangeMemberNotifyDefaultTypeInternal() {}
  union {
    GroupChangeMemberNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupChangeMemberNotifyDefaultTypeInternal _GroupChangeMemberNotify_default_instance_;
}  // namespace Group
}  // namespace Bohan
namespace Bohan {
namespace Group {

// ===================================================================

class NormalGroupListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalGroupListReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

NormalGroupListReq::NormalGroupListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.NormalGroupListReq)
}
NormalGroupListReq::NormalGroupListReq(const NormalGroupListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NormalGroupListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.NormalGroupListReq)
}

inline void NormalGroupListReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NormalGroupListReq::~NormalGroupListReq() {
  // @@protoc_insertion_point(destructor:Bohan.Group.NormalGroupListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NormalGroupListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.attach_data_.Destroy();
}

void NormalGroupListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NormalGroupListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.NormalGroupListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NormalGroupListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NormalGroupListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.NormalGroupListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.NormalGroupListReq)
  return target;
}

size_t NormalGroupListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.NormalGroupListReq)
  size_t total_size = 0;

  // required bytes user_id = 1;
  if (_internal_has_user_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalGroupListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NormalGroupListReq*>(
      &from));
}

void NormalGroupListReq::MergeFrom(const NormalGroupListReq& from) {
  NormalGroupListReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.NormalGroupListReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NormalGroupListReq::CopyFrom(const NormalGroupListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.NormalGroupListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalGroupListReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void NormalGroupListReq::InternalSwap(NormalGroupListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
}

std::string NormalGroupListReq::GetTypeName() const {
  return "Bohan.Group.NormalGroupListReq";
}


// ===================================================================

class NormalGroupListRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalGroupListRsp>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void NormalGroupListRsp::clear_group_version_list() {
  _impl_.group_version_list_.Clear();
}
NormalGroupListRsp::NormalGroupListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.NormalGroupListRsp)
}
NormalGroupListRsp::NormalGroupListRsp(const NormalGroupListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NormalGroupListRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_version_list_){from._impl_.group_version_list_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.NormalGroupListRsp)
}

inline void NormalGroupListRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_version_list_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NormalGroupListRsp::~NormalGroupListRsp() {
  // @@protoc_insertion_point(destructor:Bohan.Group.NormalGroupListRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NormalGroupListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_version_list_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.attach_data_.Destroy();
}

void NormalGroupListRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NormalGroupListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.NormalGroupListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_version_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NormalGroupListRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_version_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NormalGroupListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.NormalGroupListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_version_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_version_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.NormalGroupListRsp)
  return target;
}

size_t NormalGroupListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.NormalGroupListRsp)
  size_t total_size = 0;

  // required bytes user_id = 1;
  if (_internal_has_user_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1UL * this->_internal_group_version_list_size();
  for (const auto& msg : this->_impl_.group_version_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalGroupListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NormalGroupListRsp*>(
      &from));
}

void NormalGroupListRsp::MergeFrom(const NormalGroupListRsp& from) {
  NormalGroupListRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.NormalGroupListRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_version_list_.MergeFrom(from._impl_.group_version_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NormalGroupListRsp::CopyFrom(const NormalGroupListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.NormalGroupListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalGroupListRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.group_version_list_))
    return false;
  return true;
}

void NormalGroupListRsp::InternalSwap(NormalGroupListRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_version_list_.InternalSwap(&other->_impl_.group_version_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
}

std::string NormalGroupListRsp::GetTypeName() const {
  return "Bohan.Group.NormalGroupListRsp";
}


// ===================================================================

class GroupInfoListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupInfoListReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void GroupInfoListReq::clear_group_version_list() {
  _impl_.group_version_list_.Clear();
}
GroupInfoListReq::GroupInfoListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.GroupInfoListReq)
}
GroupInfoListReq::GroupInfoListReq(const GroupInfoListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GroupInfoListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_version_list_){from._impl_.group_version_list_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.GroupInfoListReq)
}

inline void GroupInfoListReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_version_list_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupInfoListReq::~GroupInfoListReq() {
  // @@protoc_insertion_point(destructor:Bohan.Group.GroupInfoListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupInfoListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_version_list_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.attach_data_.Destroy();
}

void GroupInfoListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupInfoListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.GroupInfoListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_version_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupInfoListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_version_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupInfoListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.GroupInfoListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_version_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_version_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.GroupInfoListReq)
  return target;
}

size_t GroupInfoListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.GroupInfoListReq)
  size_t total_size = 0;

  // required bytes user_id = 1;
  if (_internal_has_user_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
  total_size += 1UL * this->_internal_group_version_list_size();
  for (const auto& msg : this->_impl_.group_version_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupInfoListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupInfoListReq*>(
      &from));
}

void GroupInfoListReq::MergeFrom(const GroupInfoListReq& from) {
  GroupInfoListReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.GroupInfoListReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_version_list_.MergeFrom(from._impl_.group_version_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupInfoListReq::CopyFrom(const GroupInfoListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.GroupInfoListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfoListReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.group_version_list_))
    return false;
  return true;
}

void GroupInfoListReq::InternalSwap(GroupInfoListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_version_list_.InternalSwap(&other->_impl_.group_version_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
}

std::string GroupInfoListReq::GetTypeName() const {
  return "Bohan.Group.GroupInfoListReq";
}


// ===================================================================

class GroupInfoListRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupInfoListRsp>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void GroupInfoListRsp::clear_group_info_list() {
  _impl_.group_info_list_.Clear();
}
GroupInfoListRsp::GroupInfoListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.GroupInfoListRsp)
}
GroupInfoListRsp::GroupInfoListRsp(const GroupInfoListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GroupInfoListRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_info_list_){from._impl_.group_info_list_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.GroupInfoListRsp)
}

inline void GroupInfoListRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_info_list_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupInfoListRsp::~GroupInfoListRsp() {
  // @@protoc_insertion_point(destructor:Bohan.Group.GroupInfoListRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupInfoListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_info_list_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.attach_data_.Destroy();
}

void GroupInfoListRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupInfoListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.GroupInfoListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_info_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupInfoListRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Bohan.BaseDefine.GroupInfo group_info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupInfoListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.GroupInfoListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .Bohan.BaseDefine.GroupInfo group_info_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_info_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_info_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.GroupInfoListRsp)
  return target;
}

size_t GroupInfoListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.GroupInfoListRsp)
  size_t total_size = 0;

  // required bytes user_id = 1;
  if (_internal_has_user_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Bohan.BaseDefine.GroupInfo group_info_list = 2;
  total_size += 1UL * this->_internal_group_info_list_size();
  for (const auto& msg : this->_impl_.group_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupInfoListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupInfoListRsp*>(
      &from));
}

void GroupInfoListRsp::MergeFrom(const GroupInfoListRsp& from) {
  GroupInfoListRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.GroupInfoListRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_info_list_.MergeFrom(from._impl_.group_info_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupInfoListRsp::CopyFrom(const GroupInfoListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.GroupInfoListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfoListRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.group_info_list_))
    return false;
  return true;
}

void GroupInfoListRsp::InternalSwap(GroupInfoListRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_info_list_.InternalSwap(&other->_impl_.group_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
}

std::string GroupInfoListRsp::GetTypeName() const {
  return "Bohan.Group.GroupInfoListRsp";
}


// ===================================================================

class GroupCreateReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupCreateReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

GroupCreateReq::GroupCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.GroupCreateReq)
}
GroupCreateReq::GroupCreateReq(const GroupCreateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GroupCreateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_id_list_){from._impl_.member_id_list_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.group_avatar_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_type_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_name()) {
    _this->_impl_.group_name_.Set(from._internal_group_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_avatar()) {
    _this->_impl_.group_avatar_.Set(from._internal_group_avatar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.group_type_ = from._impl_.group_type_;
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.GroupCreateReq)
}

inline void GroupCreateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_id_list_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.group_avatar_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_type_){1}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupCreateReq::~GroupCreateReq() {
  // @@protoc_insertion_point(destructor:Bohan.Group.GroupCreateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupCreateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.member_id_list_.~RepeatedField();
  _impl_.user_id_.Destroy();
  _impl_.group_name_.Destroy();
  _impl_.group_avatar_.Destroy();
  _impl_.attach_data_.Destroy();
}

void GroupCreateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.GroupCreateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.member_id_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.group_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.group_avatar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
    _impl_.group_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupCreateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Bohan.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Bohan::BaseDefine::GroupType_IsValid(val))) {
            _internal_set_group_type(static_cast<::Bohan::BaseDefine::GroupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string group_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string group_avatar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_group_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 member_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupCreateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.GroupCreateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // required .Bohan.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_group_type(), target);
  }

  // required string group_name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group_name(), target);
  }

  // required string group_avatar = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_group_avatar(), target);
  }

  // repeated uint32 member_id_list = 5;
  for (int i = 0, n = this->_internal_member_id_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_member_id_list(i), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.GroupCreateReq)
  return target;
}

size_t GroupCreateReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Bohan.Group.GroupCreateReq)
  size_t total_size = 0;

  if (_internal_has_user_id()) {
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  if (_internal_has_group_name()) {
    // required string group_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  if (_internal_has_group_avatar()) {
    // required string group_avatar = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_avatar());
  }

  if (_internal_has_group_type()) {
    // required .Bohan.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_group_type());
  }

  return total_size;
}
size_t GroupCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.GroupCreateReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());

    // required string group_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());

    // required string group_avatar = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_avatar());

    // required .Bohan.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_group_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 member_id_list = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.member_id_list_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_member_id_list_size());
    total_size += data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupCreateReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupCreateReq*>(
      &from));
}

void GroupCreateReq::MergeFrom(const GroupCreateReq& from) {
  GroupCreateReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.GroupCreateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.member_id_list_.MergeFrom(from._impl_.member_id_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_group_name(from._internal_group_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_group_avatar(from._internal_group_avatar());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.group_type_ = from._impl_.group_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupCreateReq::CopyFrom(const GroupCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.GroupCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCreateReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GroupCreateReq::InternalSwap(GroupCreateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.member_id_list_.InternalSwap(&other->_impl_.member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_name_, lhs_arena,
      &other->_impl_.group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_avatar_, lhs_arena,
      &other->_impl_.group_avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  swap(_impl_.group_type_, other->_impl_.group_type_);
}

std::string GroupCreateReq::GetTypeName() const {
  return "Bohan.Group.GroupCreateReq";
}


// ===================================================================

class GroupCreateRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupCreateRsp>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

GroupCreateRsp::GroupCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.GroupCreateRsp)
}
GroupCreateRsp::GroupCreateRsp(const GroupCreateRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GroupCreateRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_list_){from._impl_.user_id_list_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_name()) {
    _this->_impl_.group_name_.Set(from._internal_group_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.result_code_, &from._impl_.result_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.GroupCreateRsp)
}

inline void GroupCreateRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_list_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.group_name_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.result_code_){0u}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupCreateRsp::~GroupCreateRsp() {
  // @@protoc_insertion_point(destructor:Bohan.Group.GroupCreateRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupCreateRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_list_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.group_name_.Destroy();
  _impl_.attach_data_.Destroy();
}

void GroupCreateRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupCreateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.GroupCreateRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.group_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.result_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_id_) -
        reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.group_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupCreateRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result_code(&has_bits);
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string group_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes user_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_id_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupCreateRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.GroupCreateRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // required uint32 result_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  // optional uint32 group_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group_id(), target);
  }

  // required string group_name = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_group_name(), target);
  }

  // repeated bytes user_id_list = 5;
  for (int i = 0, n = this->_internal_user_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_user_id_list(i);
    target = stream->WriteBytes(5, s, target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.GroupCreateRsp)
  return target;
}

size_t GroupCreateRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Bohan.Group.GroupCreateRsp)
  size_t total_size = 0;

  if (_internal_has_user_id()) {
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  if (_internal_has_group_name()) {
    // required string group_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  if (_internal_has_result_code()) {
    // required uint32 result_code = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  return total_size;
}
size_t GroupCreateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.GroupCreateRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());

    // required string group_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());

    // required uint32 result_code = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes user_id_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_id_list_.size());
  for (int i = 0, n = _impl_.user_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.user_id_list_.Get(i));
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // optional uint32 group_id = 3;
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupCreateRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupCreateRsp*>(
      &from));
}

void GroupCreateRsp::MergeFrom(const GroupCreateRsp& from) {
  GroupCreateRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.GroupCreateRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_id_list_.MergeFrom(from._impl_.user_id_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_group_name(from._internal_group_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_code_ = from._impl_.result_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupCreateRsp::CopyFrom(const GroupCreateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.GroupCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCreateRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GroupCreateRsp::InternalSwap(GroupCreateRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.user_id_list_.InternalSwap(&other->_impl_.user_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_name_, lhs_arena,
      &other->_impl_.group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupCreateRsp, _impl_.group_id_)
      + sizeof(GroupCreateRsp::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(GroupCreateRsp, _impl_.result_code_)>(
          reinterpret_cast<char*>(&_impl_.result_code_),
          reinterpret_cast<char*>(&other->_impl_.result_code_));
}

std::string GroupCreateRsp::GetTypeName() const {
  return "Bohan.Group.GroupCreateRsp";
}


// ===================================================================

class GroupChangeMemberReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupChangeMemberReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

GroupChangeMemberReq::GroupChangeMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.GroupChangeMemberReq)
}
GroupChangeMemberReq::GroupChangeMemberReq(const GroupChangeMemberReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GroupChangeMemberReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_id_list_){from._impl_.member_id_list_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.change_type_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.change_type_, &from._impl_.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.change_type_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.GroupChangeMemberReq)
}

inline void GroupChangeMemberReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_id_list_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.change_type_){0}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupChangeMemberReq::~GroupChangeMemberReq() {
  // @@protoc_insertion_point(destructor:Bohan.Group.GroupChangeMemberReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupChangeMemberReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.member_id_list_.~RepeatedField();
  _impl_.user_id_.Destroy();
  _impl_.attach_data_.Destroy();
}

void GroupChangeMemberReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupChangeMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.GroupChangeMemberReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.member_id_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.change_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_id_) -
        reinterpret_cast<char*>(&_impl_.change_type_)) + sizeof(_impl_.group_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupChangeMemberReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Bohan::BaseDefine::GroupModifyType_IsValid(val))) {
            _internal_set_change_type(static_cast<::Bohan::BaseDefine::GroupModifyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 member_id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_member_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_id_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupChangeMemberReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.GroupChangeMemberReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_change_type(), target);
  }

  // required uint32 group_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group_id(), target);
  }

  // repeated uint32 member_id_list = 4;
  for (int i = 0, n = this->_internal_member_id_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_member_id_list(i), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.GroupChangeMemberReq)
  return target;
}

size_t GroupChangeMemberReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Bohan.Group.GroupChangeMemberReq)
  size_t total_size = 0;

  if (_internal_has_user_id()) {
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  if (_internal_has_change_type()) {
    // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  return total_size;
}
size_t GroupChangeMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.GroupChangeMemberReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());

    // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());

    // required uint32 group_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 member_id_list = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.member_id_list_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_member_id_list_size());
    total_size += data_size;
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupChangeMemberReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupChangeMemberReq*>(
      &from));
}

void GroupChangeMemberReq::MergeFrom(const GroupChangeMemberReq& from) {
  GroupChangeMemberReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.GroupChangeMemberReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.member_id_list_.MergeFrom(from._impl_.member_id_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.change_type_ = from._impl_.change_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupChangeMemberReq::CopyFrom(const GroupChangeMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.GroupChangeMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChangeMemberReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GroupChangeMemberReq::InternalSwap(GroupChangeMemberReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.member_id_list_.InternalSwap(&other->_impl_.member_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupChangeMemberReq, _impl_.group_id_)
      + sizeof(GroupChangeMemberReq::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(GroupChangeMemberReq, _impl_.change_type_)>(
          reinterpret_cast<char*>(&_impl_.change_type_),
          reinterpret_cast<char*>(&other->_impl_.change_type_));
}

std::string GroupChangeMemberReq::GetTypeName() const {
  return "Bohan.Group.GroupChangeMemberReq";
}


// ===================================================================

class GroupChangeMemberRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupChangeMemberRsp>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001d) ^ 0x0000001d) != 0;
  }
};

GroupChangeMemberRsp::GroupChangeMemberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.GroupChangeMemberRsp)
}
GroupChangeMemberRsp::GroupChangeMemberRsp(const GroupChangeMemberRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GroupChangeMemberRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cur_user_id_list_){from._impl_.cur_user_id_list_}
    , decltype(_impl_.chg_user_id_list_){from._impl_.chg_user_id_list_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.change_type_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.change_type_, &from._impl_.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.change_type_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.GroupChangeMemberRsp)
}

inline void GroupChangeMemberRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cur_user_id_list_){arena}
    , decltype(_impl_.chg_user_id_list_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.change_type_){0}
    , decltype(_impl_.result_code_){0u}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupChangeMemberRsp::~GroupChangeMemberRsp() {
  // @@protoc_insertion_point(destructor:Bohan.Group.GroupChangeMemberRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupChangeMemberRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cur_user_id_list_.~RepeatedPtrField();
  _impl_.chg_user_id_list_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.attach_data_.Destroy();
}

void GroupChangeMemberRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupChangeMemberRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.GroupChangeMemberRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cur_user_id_list_.Clear();
  _impl_.chg_user_id_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.change_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_id_) -
        reinterpret_cast<char*>(&_impl_.change_type_)) + sizeof(_impl_.group_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupChangeMemberRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Bohan::BaseDefine::GroupModifyType_IsValid(val))) {
            _internal_set_change_type(static_cast<::Bohan::BaseDefine::GroupModifyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 result_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result_code(&has_bits);
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes cur_user_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cur_user_id_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes chg_user_id_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_chg_user_id_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupChangeMemberRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.GroupChangeMemberRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_change_type(), target);
  }

  // required uint32 result_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result_code(), target);
  }

  // required uint32 group_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_group_id(), target);
  }

  // repeated bytes cur_user_id_list = 5;
  for (int i = 0, n = this->_internal_cur_user_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_cur_user_id_list(i);
    target = stream->WriteBytes(5, s, target);
  }

  // repeated bytes chg_user_id_list = 6;
  for (int i = 0, n = this->_internal_chg_user_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_chg_user_id_list(i);
    target = stream->WriteBytes(6, s, target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.GroupChangeMemberRsp)
  return target;
}

size_t GroupChangeMemberRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Bohan.Group.GroupChangeMemberRsp)
  size_t total_size = 0;

  if (_internal_has_user_id()) {
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  if (_internal_has_change_type()) {
    // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  if (_internal_has_result_code()) {
    // required uint32 result_code = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  return total_size;
}
size_t GroupChangeMemberRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.GroupChangeMemberRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());

    // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());

    // required uint32 result_code = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());

    // required uint32 group_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes cur_user_id_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cur_user_id_list_.size());
  for (int i = 0, n = _impl_.cur_user_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.cur_user_id_list_.Get(i));
  }

  // repeated bytes chg_user_id_list = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.chg_user_id_list_.size());
  for (int i = 0, n = _impl_.chg_user_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.chg_user_id_list_.Get(i));
  }

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupChangeMemberRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupChangeMemberRsp*>(
      &from));
}

void GroupChangeMemberRsp::MergeFrom(const GroupChangeMemberRsp& from) {
  GroupChangeMemberRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.GroupChangeMemberRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cur_user_id_list_.MergeFrom(from._impl_.cur_user_id_list_);
  _this->_impl_.chg_user_id_list_.MergeFrom(from._impl_.chg_user_id_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.change_type_ = from._impl_.change_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_code_ = from._impl_.result_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupChangeMemberRsp::CopyFrom(const GroupChangeMemberRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.GroupChangeMemberRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChangeMemberRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GroupChangeMemberRsp::InternalSwap(GroupChangeMemberRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cur_user_id_list_.InternalSwap(&other->_impl_.cur_user_id_list_);
  _impl_.chg_user_id_list_.InternalSwap(&other->_impl_.chg_user_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupChangeMemberRsp, _impl_.group_id_)
      + sizeof(GroupChangeMemberRsp::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(GroupChangeMemberRsp, _impl_.change_type_)>(
          reinterpret_cast<char*>(&_impl_.change_type_),
          reinterpret_cast<char*>(&other->_impl_.change_type_));
}

std::string GroupChangeMemberRsp::GetTypeName() const {
  return "Bohan.Group.GroupChangeMemberRsp";
}


// ===================================================================

class GroupShieldReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupShieldReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shield_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

GroupShieldReq::GroupShieldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.GroupShieldReq)
}
GroupShieldReq::GroupShieldReq(const GroupShieldReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GroupShieldReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.shield_status_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.group_id_, &from._impl_.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shield_status_) -
    reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.shield_status_));
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.GroupShieldReq)
}

inline void GroupShieldReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.shield_status_){0u}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupShieldReq::~GroupShieldReq() {
  // @@protoc_insertion_point(destructor:Bohan.Group.GroupShieldReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupShieldReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.attach_data_.Destroy();
}

void GroupShieldReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.GroupShieldReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shield_status_) -
        reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.shield_status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupShieldReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 shield_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shield_status(&has_bits);
          _impl_.shield_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupShieldReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.GroupShieldReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 shield_status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shield_status(), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.GroupShieldReq)
  return target;
}

size_t GroupShieldReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Bohan.Group.GroupShieldReq)
  size_t total_size = 0;

  if (_internal_has_user_id()) {
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_shield_status()) {
    // required uint32 shield_status = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shield_status());
  }

  return total_size;
}
size_t GroupShieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.GroupShieldReq)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 shield_status = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shield_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupShieldReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupShieldReq*>(
      &from));
}

void GroupShieldReq::MergeFrom(const GroupShieldReq& from) {
  GroupShieldReq* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.GroupShieldReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.shield_status_ = from._impl_.shield_status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupShieldReq::CopyFrom(const GroupShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.GroupShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupShieldReq::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GroupShieldReq::InternalSwap(GroupShieldReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupShieldReq, _impl_.shield_status_)
      + sizeof(GroupShieldReq::_impl_.shield_status_)
      - PROTOBUF_FIELD_OFFSET(GroupShieldReq, _impl_.group_id_)>(
          reinterpret_cast<char*>(&_impl_.group_id_),
          reinterpret_cast<char*>(&other->_impl_.group_id_));
}

std::string GroupShieldReq::GetTypeName() const {
  return "Bohan.Group.GroupShieldReq";
}


// ===================================================================

class GroupShieldRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupShieldRsp>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attach_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

GroupShieldRsp::GroupShieldRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.GroupShieldRsp)
}
GroupShieldRsp::GroupShieldRsp(const GroupShieldRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GroupShieldRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.result_code_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_attach_data()) {
    _this->_impl_.attach_data_.Set(from._internal_attach_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.group_id_, &from._impl_.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_code_) -
    reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.result_code_));
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.GroupShieldRsp)
}

inline void GroupShieldRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.attach_data_){}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.result_code_){0u}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.attach_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupShieldRsp::~GroupShieldRsp() {
  // @@protoc_insertion_point(destructor:Bohan.Group.GroupShieldRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupShieldRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.attach_data_.Destroy();
}

void GroupShieldRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.GroupShieldRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.attach_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_code_) -
        reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.result_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupShieldRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 result_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_result_code(&has_bits);
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupShieldRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.GroupShieldRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // required uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // required uint32 result_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_result_code(), target);
  }

  // optional bytes attach_data = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.GroupShieldRsp)
  return target;
}

size_t GroupShieldRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Bohan.Group.GroupShieldRsp)
  size_t total_size = 0;

  if (_internal_has_user_id()) {
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  if (_internal_has_result_code()) {
    // required uint32 result_code = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());
  }

  return total_size;
}
size_t GroupShieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.GroupShieldRsp)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());

    // required uint32 group_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

    // required uint32 result_code = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes attach_data = 20;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupShieldRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupShieldRsp*>(
      &from));
}

void GroupShieldRsp::MergeFrom(const GroupShieldRsp& from) {
  GroupShieldRsp* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.GroupShieldRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_attach_data(from._internal_attach_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_code_ = from._impl_.result_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupShieldRsp::CopyFrom(const GroupShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.GroupShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupShieldRsp::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GroupShieldRsp::InternalSwap(GroupShieldRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.attach_data_, lhs_arena,
      &other->_impl_.attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupShieldRsp, _impl_.result_code_)
      + sizeof(GroupShieldRsp::_impl_.result_code_)
      - PROTOBUF_FIELD_OFFSET(GroupShieldRsp, _impl_.group_id_)>(
          reinterpret_cast<char*>(&_impl_.group_id_),
          reinterpret_cast<char*>(&other->_impl_.group_id_));
}

std::string GroupShieldRsp::GetTypeName() const {
  return "Bohan.Group.GroupShieldRsp";
}


// ===================================================================

class GroupChangeMemberNotify::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupChangeMemberNotify>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

GroupChangeMemberNotify::GroupChangeMemberNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Bohan.Group.GroupChangeMemberNotify)
}
GroupChangeMemberNotify::GroupChangeMemberNotify(const GroupChangeMemberNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GroupChangeMemberNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cur_user_id_list_){from._impl_.cur_user_id_list_}
    , decltype(_impl_.chg_user_id_list_){from._impl_.chg_user_id_list_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.change_type_){}
    , decltype(_impl_.group_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.change_type_, &from._impl_.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.change_type_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:Bohan.Group.GroupChangeMemberNotify)
}

inline void GroupChangeMemberNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cur_user_id_list_){arena}
    , decltype(_impl_.chg_user_id_list_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.change_type_){0}
    , decltype(_impl_.group_id_){0u}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupChangeMemberNotify::~GroupChangeMemberNotify() {
  // @@protoc_insertion_point(destructor:Bohan.Group.GroupChangeMemberNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupChangeMemberNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cur_user_id_list_.~RepeatedPtrField();
  _impl_.chg_user_id_list_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
}

void GroupChangeMemberNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupChangeMemberNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:Bohan.Group.GroupChangeMemberNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cur_user_id_list_.Clear();
  _impl_.chg_user_id_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.user_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.change_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_id_) -
        reinterpret_cast<char*>(&_impl_.change_type_)) + sizeof(_impl_.group_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GroupChangeMemberNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Bohan::BaseDefine::GroupModifyType_IsValid(val))) {
            _internal_set_change_type(static_cast<::Bohan::BaseDefine::GroupModifyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes cur_user_id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cur_user_id_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes chg_user_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_chg_user_id_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupChangeMemberNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bohan.Group.GroupChangeMemberNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_change_type(), target);
  }

  // required uint32 group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group_id(), target);
  }

  // repeated bytes cur_user_id_list = 4;
  for (int i = 0, n = this->_internal_cur_user_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_cur_user_id_list(i);
    target = stream->WriteBytes(4, s, target);
  }

  // repeated bytes chg_user_id_list = 5;
  for (int i = 0, n = this->_internal_chg_user_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_chg_user_id_list(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bohan.Group.GroupChangeMemberNotify)
  return target;
}

size_t GroupChangeMemberNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Bohan.Group.GroupChangeMemberNotify)
  size_t total_size = 0;

  if (_internal_has_user_id()) {
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  if (_internal_has_change_type()) {
    // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  if (_internal_has_group_id()) {
    // required uint32 group_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  return total_size;
}
size_t GroupChangeMemberNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Bohan.Group.GroupChangeMemberNotify)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes user_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());

    // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());

    // required uint32 group_id = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes cur_user_id_list = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cur_user_id_list_.size());
  for (int i = 0, n = _impl_.cur_user_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.cur_user_id_list_.Get(i));
  }

  // repeated bytes chg_user_id_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.chg_user_id_list_.size());
  for (int i = 0, n = _impl_.chg_user_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.chg_user_id_list_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupChangeMemberNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupChangeMemberNotify*>(
      &from));
}

void GroupChangeMemberNotify::MergeFrom(const GroupChangeMemberNotify& from) {
  GroupChangeMemberNotify* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Bohan.Group.GroupChangeMemberNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cur_user_id_list_.MergeFrom(from._impl_.cur_user_id_list_);
  _this->_impl_.chg_user_id_list_.MergeFrom(from._impl_.chg_user_id_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.change_type_ = from._impl_.change_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupChangeMemberNotify::CopyFrom(const GroupChangeMemberNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bohan.Group.GroupChangeMemberNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChangeMemberNotify::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GroupChangeMemberNotify::InternalSwap(GroupChangeMemberNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cur_user_id_list_.InternalSwap(&other->_impl_.cur_user_id_list_);
  _impl_.chg_user_id_list_.InternalSwap(&other->_impl_.chg_user_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupChangeMemberNotify, _impl_.group_id_)
      + sizeof(GroupChangeMemberNotify::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(GroupChangeMemberNotify, _impl_.change_type_)>(
          reinterpret_cast<char*>(&_impl_.change_type_),
          reinterpret_cast<char*>(&other->_impl_.change_type_));
}

std::string GroupChangeMemberNotify::GetTypeName() const {
  return "Bohan.Group.GroupChangeMemberNotify";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Group
}  // namespace Bohan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Bohan::Group::NormalGroupListReq*
Arena::CreateMaybeMessage< ::Bohan::Group::NormalGroupListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::NormalGroupListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::NormalGroupListRsp*
Arena::CreateMaybeMessage< ::Bohan::Group::NormalGroupListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::NormalGroupListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::GroupInfoListReq*
Arena::CreateMaybeMessage< ::Bohan::Group::GroupInfoListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::GroupInfoListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::GroupInfoListRsp*
Arena::CreateMaybeMessage< ::Bohan::Group::GroupInfoListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::GroupInfoListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::GroupCreateReq*
Arena::CreateMaybeMessage< ::Bohan::Group::GroupCreateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::GroupCreateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::GroupCreateRsp*
Arena::CreateMaybeMessage< ::Bohan::Group::GroupCreateRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::GroupCreateRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::GroupChangeMemberReq*
Arena::CreateMaybeMessage< ::Bohan::Group::GroupChangeMemberReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::GroupChangeMemberReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::GroupChangeMemberRsp*
Arena::CreateMaybeMessage< ::Bohan::Group::GroupChangeMemberRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::GroupChangeMemberRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::GroupShieldReq*
Arena::CreateMaybeMessage< ::Bohan::Group::GroupShieldReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::GroupShieldReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::GroupShieldRsp*
Arena::CreateMaybeMessage< ::Bohan::Group::GroupShieldRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::GroupShieldRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::Bohan::Group::GroupChangeMemberNotify*
Arena::CreateMaybeMessage< ::Bohan::Group::GroupChangeMemberNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Bohan::Group::GroupChangeMemberNotify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
