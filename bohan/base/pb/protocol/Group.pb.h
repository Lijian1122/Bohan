// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Group_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Group_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Group_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Group_2eproto {
  static const uint32_t offsets[];
};
namespace Bohan {
namespace Group {
class GroupChangeMemberNotify;
struct GroupChangeMemberNotifyDefaultTypeInternal;
extern GroupChangeMemberNotifyDefaultTypeInternal _GroupChangeMemberNotify_default_instance_;
class GroupChangeMemberReq;
struct GroupChangeMemberReqDefaultTypeInternal;
extern GroupChangeMemberReqDefaultTypeInternal _GroupChangeMemberReq_default_instance_;
class GroupChangeMemberRsp;
struct GroupChangeMemberRspDefaultTypeInternal;
extern GroupChangeMemberRspDefaultTypeInternal _GroupChangeMemberRsp_default_instance_;
class GroupCreateReq;
struct GroupCreateReqDefaultTypeInternal;
extern GroupCreateReqDefaultTypeInternal _GroupCreateReq_default_instance_;
class GroupCreateRsp;
struct GroupCreateRspDefaultTypeInternal;
extern GroupCreateRspDefaultTypeInternal _GroupCreateRsp_default_instance_;
class GroupInfoListReq;
struct GroupInfoListReqDefaultTypeInternal;
extern GroupInfoListReqDefaultTypeInternal _GroupInfoListReq_default_instance_;
class GroupInfoListRsp;
struct GroupInfoListRspDefaultTypeInternal;
extern GroupInfoListRspDefaultTypeInternal _GroupInfoListRsp_default_instance_;
class GroupShieldReq;
struct GroupShieldReqDefaultTypeInternal;
extern GroupShieldReqDefaultTypeInternal _GroupShieldReq_default_instance_;
class GroupShieldRsp;
struct GroupShieldRspDefaultTypeInternal;
extern GroupShieldRspDefaultTypeInternal _GroupShieldRsp_default_instance_;
class NormalGroupListReq;
struct NormalGroupListReqDefaultTypeInternal;
extern NormalGroupListReqDefaultTypeInternal _NormalGroupListReq_default_instance_;
class NormalGroupListRsp;
struct NormalGroupListRspDefaultTypeInternal;
extern NormalGroupListRspDefaultTypeInternal _NormalGroupListRsp_default_instance_;
}  // namespace Group
}  // namespace Bohan
PROTOBUF_NAMESPACE_OPEN
template<> ::Bohan::Group::GroupChangeMemberNotify* Arena::CreateMaybeMessage<::Bohan::Group::GroupChangeMemberNotify>(Arena*);
template<> ::Bohan::Group::GroupChangeMemberReq* Arena::CreateMaybeMessage<::Bohan::Group::GroupChangeMemberReq>(Arena*);
template<> ::Bohan::Group::GroupChangeMemberRsp* Arena::CreateMaybeMessage<::Bohan::Group::GroupChangeMemberRsp>(Arena*);
template<> ::Bohan::Group::GroupCreateReq* Arena::CreateMaybeMessage<::Bohan::Group::GroupCreateReq>(Arena*);
template<> ::Bohan::Group::GroupCreateRsp* Arena::CreateMaybeMessage<::Bohan::Group::GroupCreateRsp>(Arena*);
template<> ::Bohan::Group::GroupInfoListReq* Arena::CreateMaybeMessage<::Bohan::Group::GroupInfoListReq>(Arena*);
template<> ::Bohan::Group::GroupInfoListRsp* Arena::CreateMaybeMessage<::Bohan::Group::GroupInfoListRsp>(Arena*);
template<> ::Bohan::Group::GroupShieldReq* Arena::CreateMaybeMessage<::Bohan::Group::GroupShieldReq>(Arena*);
template<> ::Bohan::Group::GroupShieldRsp* Arena::CreateMaybeMessage<::Bohan::Group::GroupShieldRsp>(Arena*);
template<> ::Bohan::Group::NormalGroupListReq* Arena::CreateMaybeMessage<::Bohan::Group::NormalGroupListReq>(Arena*);
template<> ::Bohan::Group::NormalGroupListRsp* Arena::CreateMaybeMessage<::Bohan::Group::NormalGroupListRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Bohan {
namespace Group {

// ===================================================================

class NormalGroupListReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.NormalGroupListReq) */ {
 public:
  inline NormalGroupListReq() : NormalGroupListReq(nullptr) {}
  ~NormalGroupListReq() override;
  explicit PROTOBUF_CONSTEXPR NormalGroupListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NormalGroupListReq(const NormalGroupListReq& from);
  NormalGroupListReq(NormalGroupListReq&& from) noexcept
    : NormalGroupListReq() {
    *this = ::std::move(from);
  }

  inline NormalGroupListReq& operator=(const NormalGroupListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalGroupListReq& operator=(NormalGroupListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NormalGroupListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const NormalGroupListReq* internal_default_instance() {
    return reinterpret_cast<const NormalGroupListReq*>(
               &_NormalGroupListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NormalGroupListReq& a, NormalGroupListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalGroupListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalGroupListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NormalGroupListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NormalGroupListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NormalGroupListReq& from);
  void MergeFrom(const NormalGroupListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NormalGroupListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.NormalGroupListReq";
  }
  protected:
  explicit NormalGroupListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.NormalGroupListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class NormalGroupListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.NormalGroupListRsp) */ {
 public:
  inline NormalGroupListRsp() : NormalGroupListRsp(nullptr) {}
  ~NormalGroupListRsp() override;
  explicit PROTOBUF_CONSTEXPR NormalGroupListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NormalGroupListRsp(const NormalGroupListRsp& from);
  NormalGroupListRsp(NormalGroupListRsp&& from) noexcept
    : NormalGroupListRsp() {
    *this = ::std::move(from);
  }

  inline NormalGroupListRsp& operator=(const NormalGroupListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalGroupListRsp& operator=(NormalGroupListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NormalGroupListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const NormalGroupListRsp* internal_default_instance() {
    return reinterpret_cast<const NormalGroupListRsp*>(
               &_NormalGroupListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NormalGroupListRsp& a, NormalGroupListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalGroupListRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalGroupListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NormalGroupListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NormalGroupListRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NormalGroupListRsp& from);
  void MergeFrom(const NormalGroupListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NormalGroupListRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.NormalGroupListRsp";
  }
  protected:
  explicit NormalGroupListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupVersionListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
  int group_version_list_size() const;
  private:
  int _internal_group_version_list_size() const;
  public:
  void clear_group_version_list();
  ::Bohan::BaseDefine::GroupVersionInfo* mutable_group_version_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo >*
      mutable_group_version_list();
  private:
  const ::Bohan::BaseDefine::GroupVersionInfo& _internal_group_version_list(int index) const;
  ::Bohan::BaseDefine::GroupVersionInfo* _internal_add_group_version_list();
  public:
  const ::Bohan::BaseDefine::GroupVersionInfo& group_version_list(int index) const;
  ::Bohan::BaseDefine::GroupVersionInfo* add_group_version_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo >&
      group_version_list() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.NormalGroupListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo > group_version_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupInfoListReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.GroupInfoListReq) */ {
 public:
  inline GroupInfoListReq() : GroupInfoListReq(nullptr) {}
  ~GroupInfoListReq() override;
  explicit PROTOBUF_CONSTEXPR GroupInfoListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfoListReq(const GroupInfoListReq& from);
  GroupInfoListReq(GroupInfoListReq&& from) noexcept
    : GroupInfoListReq() {
    *this = ::std::move(from);
  }

  inline GroupInfoListReq& operator=(const GroupInfoListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfoListReq& operator=(GroupInfoListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupInfoListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfoListReq* internal_default_instance() {
    return reinterpret_cast<const GroupInfoListReq*>(
               &_GroupInfoListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupInfoListReq& a, GroupInfoListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfoListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfoListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInfoListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInfoListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupInfoListReq& from);
  void MergeFrom(const GroupInfoListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupInfoListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.GroupInfoListReq";
  }
  protected:
  explicit GroupInfoListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupVersionListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
  int group_version_list_size() const;
  private:
  int _internal_group_version_list_size() const;
  public:
  void clear_group_version_list();
  ::Bohan::BaseDefine::GroupVersionInfo* mutable_group_version_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo >*
      mutable_group_version_list();
  private:
  const ::Bohan::BaseDefine::GroupVersionInfo& _internal_group_version_list(int index) const;
  ::Bohan::BaseDefine::GroupVersionInfo* _internal_add_group_version_list();
  public:
  const ::Bohan::BaseDefine::GroupVersionInfo& group_version_list(int index) const;
  ::Bohan::BaseDefine::GroupVersionInfo* add_group_version_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo >&
      group_version_list() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.GroupInfoListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo > group_version_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupInfoListRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.GroupInfoListRsp) */ {
 public:
  inline GroupInfoListRsp() : GroupInfoListRsp(nullptr) {}
  ~GroupInfoListRsp() override;
  explicit PROTOBUF_CONSTEXPR GroupInfoListRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfoListRsp(const GroupInfoListRsp& from);
  GroupInfoListRsp(GroupInfoListRsp&& from) noexcept
    : GroupInfoListRsp() {
    *this = ::std::move(from);
  }

  inline GroupInfoListRsp& operator=(const GroupInfoListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfoListRsp& operator=(GroupInfoListRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupInfoListRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfoListRsp* internal_default_instance() {
    return reinterpret_cast<const GroupInfoListRsp*>(
               &_GroupInfoListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupInfoListRsp& a, GroupInfoListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfoListRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfoListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInfoListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInfoListRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupInfoListRsp& from);
  void MergeFrom(const GroupInfoListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupInfoListRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.GroupInfoListRsp";
  }
  protected:
  explicit GroupInfoListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupInfoListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // repeated .Bohan.BaseDefine.GroupInfo group_info_list = 2;
  int group_info_list_size() const;
  private:
  int _internal_group_info_list_size() const;
  public:
  void clear_group_info_list();
  ::Bohan::BaseDefine::GroupInfo* mutable_group_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupInfo >*
      mutable_group_info_list();
  private:
  const ::Bohan::BaseDefine::GroupInfo& _internal_group_info_list(int index) const;
  ::Bohan::BaseDefine::GroupInfo* _internal_add_group_info_list();
  public:
  const ::Bohan::BaseDefine::GroupInfo& group_info_list(int index) const;
  ::Bohan::BaseDefine::GroupInfo* add_group_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupInfo >&
      group_info_list() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.GroupInfoListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupInfo > group_info_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupCreateReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.GroupCreateReq) */ {
 public:
  inline GroupCreateReq() : GroupCreateReq(nullptr) {}
  ~GroupCreateReq() override;
  explicit PROTOBUF_CONSTEXPR GroupCreateReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCreateReq(const GroupCreateReq& from);
  GroupCreateReq(GroupCreateReq&& from) noexcept
    : GroupCreateReq() {
    *this = ::std::move(from);
  }

  inline GroupCreateReq& operator=(const GroupCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCreateReq& operator=(GroupCreateReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupCreateReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCreateReq* internal_default_instance() {
    return reinterpret_cast<const GroupCreateReq*>(
               &_GroupCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroupCreateReq& a, GroupCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCreateReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCreateReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupCreateReq& from);
  void MergeFrom(const GroupCreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupCreateReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.GroupCreateReq";
  }
  protected:
  explicit GroupCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdListFieldNumber = 5,
    kGroupNameFieldNumber = 3,
    kGroupAvatarFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kGroupTypeFieldNumber = 2,
  };
  // repeated uint32 member_id_list = 5;
  int member_id_list_size() const;
  private:
  int _internal_member_id_list_size() const;
  public:
  void clear_member_id_list();
  private:
  uint32_t _internal_member_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_member_id_list() const;
  void _internal_add_member_id_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_member_id_list();
  public:
  uint32_t member_id_list(int index) const;
  void set_member_id_list(int index, uint32_t value);
  void add_member_id_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      member_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_member_id_list();

  // required string group_name = 3;
  bool has_group_name() const;
  private:
  bool _internal_has_group_name() const;
  public:
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // required string group_avatar = 4;
  bool has_group_avatar() const;
  private:
  bool _internal_has_group_avatar() const;
  public:
  void clear_group_avatar();
  const std::string& group_avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_avatar();
  PROTOBUF_NODISCARD std::string* release_group_avatar();
  void set_allocated_group_avatar(std::string* group_avatar);
  private:
  const std::string& _internal_group_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_avatar(const std::string& value);
  std::string* _internal_mutable_group_avatar();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required .Bohan.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
  bool has_group_type() const;
  private:
  bool _internal_has_group_type() const;
  public:
  void clear_group_type();
  ::Bohan::BaseDefine::GroupType group_type() const;
  void set_group_type(::Bohan::BaseDefine::GroupType value);
  private:
  ::Bohan::BaseDefine::GroupType _internal_group_type() const;
  void _internal_set_group_type(::Bohan::BaseDefine::GroupType value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.GroupCreateReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > member_id_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_avatar_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
    int group_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupCreateRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.GroupCreateRsp) */ {
 public:
  inline GroupCreateRsp() : GroupCreateRsp(nullptr) {}
  ~GroupCreateRsp() override;
  explicit PROTOBUF_CONSTEXPR GroupCreateRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCreateRsp(const GroupCreateRsp& from);
  GroupCreateRsp(GroupCreateRsp&& from) noexcept
    : GroupCreateRsp() {
    *this = ::std::move(from);
  }

  inline GroupCreateRsp& operator=(const GroupCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCreateRsp& operator=(GroupCreateRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupCreateRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCreateRsp* internal_default_instance() {
    return reinterpret_cast<const GroupCreateRsp*>(
               &_GroupCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GroupCreateRsp& a, GroupCreateRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCreateRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCreateRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCreateRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCreateRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupCreateRsp& from);
  void MergeFrom(const GroupCreateRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupCreateRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.GroupCreateRsp";
  }
  protected:
  explicit GroupCreateRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdListFieldNumber = 5,
    kGroupNameFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kResultCodeFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // repeated uint32 user_id_list = 5;
  int user_id_list_size() const;
  private:
  int _internal_user_id_list_size() const;
  public:
  void clear_user_id_list();
  private:
  uint32_t _internal_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_user_id_list() const;
  void _internal_add_user_id_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_user_id_list();
  public:
  uint32_t user_id_list(int index) const;
  void set_user_id_list(int index, uint32_t value);
  void add_user_id_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_user_id_list();

  // required string group_name = 4;
  bool has_group_name() const;
  private:
  bool _internal_has_group_name() const;
  public:
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 result_code = 2;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  uint32_t result_code() const;
  void set_result_code(uint32_t value);
  private:
  uint32_t _internal_result_code() const;
  void _internal_set_result_code(uint32_t value);
  public:

  // optional uint32 group_id = 3;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.GroupCreateRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > user_id_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
    uint32_t result_code_;
    uint32_t group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupChangeMemberReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.GroupChangeMemberReq) */ {
 public:
  inline GroupChangeMemberReq() : GroupChangeMemberReq(nullptr) {}
  ~GroupChangeMemberReq() override;
  explicit PROTOBUF_CONSTEXPR GroupChangeMemberReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChangeMemberReq(const GroupChangeMemberReq& from);
  GroupChangeMemberReq(GroupChangeMemberReq&& from) noexcept
    : GroupChangeMemberReq() {
    *this = ::std::move(from);
  }

  inline GroupChangeMemberReq& operator=(const GroupChangeMemberReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChangeMemberReq& operator=(GroupChangeMemberReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupChangeMemberReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChangeMemberReq* internal_default_instance() {
    return reinterpret_cast<const GroupChangeMemberReq*>(
               &_GroupChangeMemberReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GroupChangeMemberReq& a, GroupChangeMemberReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChangeMemberReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChangeMemberReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChangeMemberReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChangeMemberReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupChangeMemberReq& from);
  void MergeFrom(const GroupChangeMemberReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChangeMemberReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.GroupChangeMemberReq";
  }
  protected:
  explicit GroupChangeMemberReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdListFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kChangeTypeFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // repeated uint32 member_id_list = 4;
  int member_id_list_size() const;
  private:
  int _internal_member_id_list_size() const;
  public:
  void clear_member_id_list();
  private:
  uint32_t _internal_member_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_member_id_list() const;
  void _internal_add_member_id_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_member_id_list();
  public:
  uint32_t member_id_list(int index) const;
  void set_member_id_list(int index, uint32_t value);
  void add_member_id_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      member_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_member_id_list();

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
  bool has_change_type() const;
  private:
  bool _internal_has_change_type() const;
  public:
  void clear_change_type();
  ::Bohan::BaseDefine::GroupModifyType change_type() const;
  void set_change_type(::Bohan::BaseDefine::GroupModifyType value);
  private:
  ::Bohan::BaseDefine::GroupModifyType _internal_change_type() const;
  void _internal_set_change_type(::Bohan::BaseDefine::GroupModifyType value);
  public:

  // required uint32 group_id = 3;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.GroupChangeMemberReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > member_id_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
    int change_type_;
    uint32_t group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupChangeMemberRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.GroupChangeMemberRsp) */ {
 public:
  inline GroupChangeMemberRsp() : GroupChangeMemberRsp(nullptr) {}
  ~GroupChangeMemberRsp() override;
  explicit PROTOBUF_CONSTEXPR GroupChangeMemberRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChangeMemberRsp(const GroupChangeMemberRsp& from);
  GroupChangeMemberRsp(GroupChangeMemberRsp&& from) noexcept
    : GroupChangeMemberRsp() {
    *this = ::std::move(from);
  }

  inline GroupChangeMemberRsp& operator=(const GroupChangeMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChangeMemberRsp& operator=(GroupChangeMemberRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupChangeMemberRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChangeMemberRsp* internal_default_instance() {
    return reinterpret_cast<const GroupChangeMemberRsp*>(
               &_GroupChangeMemberRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GroupChangeMemberRsp& a, GroupChangeMemberRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChangeMemberRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChangeMemberRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChangeMemberRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChangeMemberRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupChangeMemberRsp& from);
  void MergeFrom(const GroupChangeMemberRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChangeMemberRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.GroupChangeMemberRsp";
  }
  protected:
  explicit GroupChangeMemberRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurUserIdListFieldNumber = 5,
    kChgUserIdListFieldNumber = 6,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kChangeTypeFieldNumber = 2,
    kResultCodeFieldNumber = 3,
    kGroupIdFieldNumber = 4,
  };
  // repeated uint32 cur_user_id_list = 5;
  int cur_user_id_list_size() const;
  private:
  int _internal_cur_user_id_list_size() const;
  public:
  void clear_cur_user_id_list();
  private:
  uint32_t _internal_cur_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cur_user_id_list() const;
  void _internal_add_cur_user_id_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cur_user_id_list();
  public:
  uint32_t cur_user_id_list(int index) const;
  void set_cur_user_id_list(int index, uint32_t value);
  void add_cur_user_id_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cur_user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cur_user_id_list();

  // repeated uint32 chg_user_id_list = 6;
  int chg_user_id_list_size() const;
  private:
  int _internal_chg_user_id_list_size() const;
  public:
  void clear_chg_user_id_list();
  private:
  uint32_t _internal_chg_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_chg_user_id_list() const;
  void _internal_add_chg_user_id_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_chg_user_id_list();
  public:
  uint32_t chg_user_id_list(int index) const;
  void set_chg_user_id_list(int index, uint32_t value);
  void add_chg_user_id_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      chg_user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_chg_user_id_list();

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
  bool has_change_type() const;
  private:
  bool _internal_has_change_type() const;
  public:
  void clear_change_type();
  ::Bohan::BaseDefine::GroupModifyType change_type() const;
  void set_change_type(::Bohan::BaseDefine::GroupModifyType value);
  private:
  ::Bohan::BaseDefine::GroupModifyType _internal_change_type() const;
  void _internal_set_change_type(::Bohan::BaseDefine::GroupModifyType value);
  public:

  // required uint32 result_code = 3;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  uint32_t result_code() const;
  void set_result_code(uint32_t value);
  private:
  uint32_t _internal_result_code() const;
  void _internal_set_result_code(uint32_t value);
  public:

  // required uint32 group_id = 4;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.GroupChangeMemberRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cur_user_id_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > chg_user_id_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
    int change_type_;
    uint32_t result_code_;
    uint32_t group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupShieldReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.GroupShieldReq) */ {
 public:
  inline GroupShieldReq() : GroupShieldReq(nullptr) {}
  ~GroupShieldReq() override;
  explicit PROTOBUF_CONSTEXPR GroupShieldReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupShieldReq(const GroupShieldReq& from);
  GroupShieldReq(GroupShieldReq&& from) noexcept
    : GroupShieldReq() {
    *this = ::std::move(from);
  }

  inline GroupShieldReq& operator=(const GroupShieldReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupShieldReq& operator=(GroupShieldReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupShieldReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupShieldReq* internal_default_instance() {
    return reinterpret_cast<const GroupShieldReq*>(
               &_GroupShieldReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupShieldReq& a, GroupShieldReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupShieldReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupShieldReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupShieldReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupShieldReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupShieldReq& from);
  void MergeFrom(const GroupShieldReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupShieldReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.GroupShieldReq";
  }
  protected:
  explicit GroupShieldReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kShieldStatusFieldNumber = 3,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 shield_status = 3;
  bool has_shield_status() const;
  private:
  bool _internal_has_shield_status() const;
  public:
  void clear_shield_status();
  uint32_t shield_status() const;
  void set_shield_status(uint32_t value);
  private:
  uint32_t _internal_shield_status() const;
  void _internal_set_shield_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.GroupShieldReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
    uint32_t group_id_;
    uint32_t shield_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupShieldRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.GroupShieldRsp) */ {
 public:
  inline GroupShieldRsp() : GroupShieldRsp(nullptr) {}
  ~GroupShieldRsp() override;
  explicit PROTOBUF_CONSTEXPR GroupShieldRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupShieldRsp(const GroupShieldRsp& from);
  GroupShieldRsp(GroupShieldRsp&& from) noexcept
    : GroupShieldRsp() {
    *this = ::std::move(from);
  }

  inline GroupShieldRsp& operator=(const GroupShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupShieldRsp& operator=(GroupShieldRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupShieldRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupShieldRsp* internal_default_instance() {
    return reinterpret_cast<const GroupShieldRsp*>(
               &_GroupShieldRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupShieldRsp& a, GroupShieldRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupShieldRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupShieldRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupShieldRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupShieldRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupShieldRsp& from);
  void MergeFrom(const GroupShieldRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupShieldRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.GroupShieldRsp";
  }
  protected:
  explicit GroupShieldRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kResultCodeFieldNumber = 3,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 group_id = 2;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // required uint32 result_code = 3;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  uint32_t result_code() const;
  void set_result_code(uint32_t value);
  private:
  uint32_t _internal_result_code() const;
  void _internal_set_result_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.GroupShieldRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
    uint32_t group_id_;
    uint32_t result_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupChangeMemberNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.Group.GroupChangeMemberNotify) */ {
 public:
  inline GroupChangeMemberNotify() : GroupChangeMemberNotify(nullptr) {}
  ~GroupChangeMemberNotify() override;
  explicit PROTOBUF_CONSTEXPR GroupChangeMemberNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupChangeMemberNotify(const GroupChangeMemberNotify& from);
  GroupChangeMemberNotify(GroupChangeMemberNotify&& from) noexcept
    : GroupChangeMemberNotify() {
    *this = ::std::move(from);
  }

  inline GroupChangeMemberNotify& operator=(const GroupChangeMemberNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChangeMemberNotify& operator=(GroupChangeMemberNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupChangeMemberNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChangeMemberNotify* internal_default_instance() {
    return reinterpret_cast<const GroupChangeMemberNotify*>(
               &_GroupChangeMemberNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GroupChangeMemberNotify& a, GroupChangeMemberNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChangeMemberNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChangeMemberNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChangeMemberNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChangeMemberNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GroupChangeMemberNotify& from);
  void MergeFrom(const GroupChangeMemberNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChangeMemberNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.Group.GroupChangeMemberNotify";
  }
  protected:
  explicit GroupChangeMemberNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurUserIdListFieldNumber = 4,
    kChgUserIdListFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kChangeTypeFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // repeated uint32 cur_user_id_list = 4;
  int cur_user_id_list_size() const;
  private:
  int _internal_cur_user_id_list_size() const;
  public:
  void clear_cur_user_id_list();
  private:
  uint32_t _internal_cur_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cur_user_id_list() const;
  void _internal_add_cur_user_id_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cur_user_id_list();
  public:
  uint32_t cur_user_id_list(int index) const;
  void set_cur_user_id_list(int index, uint32_t value);
  void add_cur_user_id_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cur_user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cur_user_id_list();

  // repeated uint32 chg_user_id_list = 5;
  int chg_user_id_list_size() const;
  private:
  int _internal_chg_user_id_list_size() const;
  public:
  void clear_chg_user_id_list();
  private:
  uint32_t _internal_chg_user_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_chg_user_id_list() const;
  void _internal_add_chg_user_id_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_chg_user_id_list();
  public:
  uint32_t chg_user_id_list(int index) const;
  void set_chg_user_id_list(int index, uint32_t value);
  void add_chg_user_id_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      chg_user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_chg_user_id_list();

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required .Bohan.BaseDefine.GroupModifyType change_type = 2;
  bool has_change_type() const;
  private:
  bool _internal_has_change_type() const;
  public:
  void clear_change_type();
  ::Bohan::BaseDefine::GroupModifyType change_type() const;
  void set_change_type(::Bohan::BaseDefine::GroupModifyType value);
  private:
  ::Bohan::BaseDefine::GroupModifyType _internal_change_type() const;
  void _internal_set_change_type(::Bohan::BaseDefine::GroupModifyType value);
  public:

  // required uint32 group_id = 3;
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.Group.GroupChangeMemberNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cur_user_id_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > chg_user_id_list_;
    uint32_t user_id_;
    int change_type_;
    uint32_t group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Group_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NormalGroupListReq

// required uint32 user_id = 1;
inline bool NormalGroupListReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NormalGroupListReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void NormalGroupListReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t NormalGroupListReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t NormalGroupListReq::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.NormalGroupListReq.user_id)
  return _internal_user_id();
}
inline void NormalGroupListReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void NormalGroupListReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.NormalGroupListReq.user_id)
}

// optional bytes attach_data = 20;
inline bool NormalGroupListReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NormalGroupListReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void NormalGroupListReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NormalGroupListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.NormalGroupListReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NormalGroupListReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.NormalGroupListReq.attach_data)
}
inline std::string* NormalGroupListReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.NormalGroupListReq.attach_data)
  return _s;
}
inline const std::string& NormalGroupListReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void NormalGroupListReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* NormalGroupListReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* NormalGroupListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.NormalGroupListReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NormalGroupListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.NormalGroupListReq.attach_data)
}

// -------------------------------------------------------------------

// NormalGroupListRsp

// required uint32 user_id = 1;
inline bool NormalGroupListRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NormalGroupListRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void NormalGroupListRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t NormalGroupListRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t NormalGroupListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.NormalGroupListRsp.user_id)
  return _internal_user_id();
}
inline void NormalGroupListRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void NormalGroupListRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.NormalGroupListRsp.user_id)
}

// repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
inline int NormalGroupListRsp::_internal_group_version_list_size() const {
  return _impl_.group_version_list_.size();
}
inline int NormalGroupListRsp::group_version_list_size() const {
  return _internal_group_version_list_size();
}
inline ::Bohan::BaseDefine::GroupVersionInfo* NormalGroupListRsp::mutable_group_version_list(int index) {
  // @@protoc_insertion_point(field_mutable:Bohan.Group.NormalGroupListRsp.group_version_list)
  return _impl_.group_version_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo >*
NormalGroupListRsp::mutable_group_version_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.NormalGroupListRsp.group_version_list)
  return &_impl_.group_version_list_;
}
inline const ::Bohan::BaseDefine::GroupVersionInfo& NormalGroupListRsp::_internal_group_version_list(int index) const {
  return _impl_.group_version_list_.Get(index);
}
inline const ::Bohan::BaseDefine::GroupVersionInfo& NormalGroupListRsp::group_version_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.NormalGroupListRsp.group_version_list)
  return _internal_group_version_list(index);
}
inline ::Bohan::BaseDefine::GroupVersionInfo* NormalGroupListRsp::_internal_add_group_version_list() {
  return _impl_.group_version_list_.Add();
}
inline ::Bohan::BaseDefine::GroupVersionInfo* NormalGroupListRsp::add_group_version_list() {
  ::Bohan::BaseDefine::GroupVersionInfo* _add = _internal_add_group_version_list();
  // @@protoc_insertion_point(field_add:Bohan.Group.NormalGroupListRsp.group_version_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo >&
NormalGroupListRsp::group_version_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.NormalGroupListRsp.group_version_list)
  return _impl_.group_version_list_;
}

// optional bytes attach_data = 20;
inline bool NormalGroupListRsp::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NormalGroupListRsp::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void NormalGroupListRsp::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NormalGroupListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.NormalGroupListRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NormalGroupListRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.NormalGroupListRsp.attach_data)
}
inline std::string* NormalGroupListRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.NormalGroupListRsp.attach_data)
  return _s;
}
inline const std::string& NormalGroupListRsp::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void NormalGroupListRsp::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* NormalGroupListRsp::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* NormalGroupListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.NormalGroupListRsp.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NormalGroupListRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.NormalGroupListRsp.attach_data)
}

// -------------------------------------------------------------------

// GroupInfoListReq

// required uint32 user_id = 1;
inline bool GroupInfoListReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupInfoListReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupInfoListReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupInfoListReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupInfoListReq::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupInfoListReq.user_id)
  return _internal_user_id();
}
inline void GroupInfoListReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void GroupInfoListReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupInfoListReq.user_id)
}

// repeated .Bohan.BaseDefine.GroupVersionInfo group_version_list = 2;
inline int GroupInfoListReq::_internal_group_version_list_size() const {
  return _impl_.group_version_list_.size();
}
inline int GroupInfoListReq::group_version_list_size() const {
  return _internal_group_version_list_size();
}
inline ::Bohan::BaseDefine::GroupVersionInfo* GroupInfoListReq::mutable_group_version_list(int index) {
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupInfoListReq.group_version_list)
  return _impl_.group_version_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo >*
GroupInfoListReq::mutable_group_version_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.GroupInfoListReq.group_version_list)
  return &_impl_.group_version_list_;
}
inline const ::Bohan::BaseDefine::GroupVersionInfo& GroupInfoListReq::_internal_group_version_list(int index) const {
  return _impl_.group_version_list_.Get(index);
}
inline const ::Bohan::BaseDefine::GroupVersionInfo& GroupInfoListReq::group_version_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupInfoListReq.group_version_list)
  return _internal_group_version_list(index);
}
inline ::Bohan::BaseDefine::GroupVersionInfo* GroupInfoListReq::_internal_add_group_version_list() {
  return _impl_.group_version_list_.Add();
}
inline ::Bohan::BaseDefine::GroupVersionInfo* GroupInfoListReq::add_group_version_list() {
  ::Bohan::BaseDefine::GroupVersionInfo* _add = _internal_add_group_version_list();
  // @@protoc_insertion_point(field_add:Bohan.Group.GroupInfoListReq.group_version_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupVersionInfo >&
GroupInfoListReq::group_version_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.GroupInfoListReq.group_version_list)
  return _impl_.group_version_list_;
}

// optional bytes attach_data = 20;
inline bool GroupInfoListReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupInfoListReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupInfoListReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupInfoListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupInfoListReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfoListReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupInfoListReq.attach_data)
}
inline std::string* GroupInfoListReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupInfoListReq.attach_data)
  return _s;
}
inline const std::string& GroupInfoListReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupInfoListReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfoListReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfoListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupInfoListReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupInfoListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupInfoListReq.attach_data)
}

// -------------------------------------------------------------------

// GroupInfoListRsp

// required uint32 user_id = 1;
inline bool GroupInfoListRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupInfoListRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupInfoListRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupInfoListRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupInfoListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupInfoListRsp.user_id)
  return _internal_user_id();
}
inline void GroupInfoListRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void GroupInfoListRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupInfoListRsp.user_id)
}

// repeated .Bohan.BaseDefine.GroupInfo group_info_list = 2;
inline int GroupInfoListRsp::_internal_group_info_list_size() const {
  return _impl_.group_info_list_.size();
}
inline int GroupInfoListRsp::group_info_list_size() const {
  return _internal_group_info_list_size();
}
inline ::Bohan::BaseDefine::GroupInfo* GroupInfoListRsp::mutable_group_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupInfoListRsp.group_info_list)
  return _impl_.group_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupInfo >*
GroupInfoListRsp::mutable_group_info_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.GroupInfoListRsp.group_info_list)
  return &_impl_.group_info_list_;
}
inline const ::Bohan::BaseDefine::GroupInfo& GroupInfoListRsp::_internal_group_info_list(int index) const {
  return _impl_.group_info_list_.Get(index);
}
inline const ::Bohan::BaseDefine::GroupInfo& GroupInfoListRsp::group_info_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupInfoListRsp.group_info_list)
  return _internal_group_info_list(index);
}
inline ::Bohan::BaseDefine::GroupInfo* GroupInfoListRsp::_internal_add_group_info_list() {
  return _impl_.group_info_list_.Add();
}
inline ::Bohan::BaseDefine::GroupInfo* GroupInfoListRsp::add_group_info_list() {
  ::Bohan::BaseDefine::GroupInfo* _add = _internal_add_group_info_list();
  // @@protoc_insertion_point(field_add:Bohan.Group.GroupInfoListRsp.group_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::GroupInfo >&
GroupInfoListRsp::group_info_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.GroupInfoListRsp.group_info_list)
  return _impl_.group_info_list_;
}

// optional bytes attach_data = 20;
inline bool GroupInfoListRsp::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupInfoListRsp::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupInfoListRsp::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupInfoListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupInfoListRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfoListRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupInfoListRsp.attach_data)
}
inline std::string* GroupInfoListRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupInfoListRsp.attach_data)
  return _s;
}
inline const std::string& GroupInfoListRsp::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupInfoListRsp::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfoListRsp::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfoListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupInfoListRsp.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupInfoListRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupInfoListRsp.attach_data)
}

// -------------------------------------------------------------------

// GroupCreateReq

// required uint32 user_id = 1;
inline bool GroupCreateReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupCreateReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupCreateReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupCreateReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupCreateReq::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateReq.user_id)
  return _internal_user_id();
}
inline void GroupCreateReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_id_ = value;
}
inline void GroupCreateReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateReq.user_id)
}

// required .Bohan.BaseDefine.GroupType group_type = 2 [default = GROUP_TYPE_TMP];
inline bool GroupCreateReq::_internal_has_group_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupCreateReq::has_group_type() const {
  return _internal_has_group_type();
}
inline void GroupCreateReq::clear_group_type() {
  _impl_.group_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::Bohan::BaseDefine::GroupType GroupCreateReq::_internal_group_type() const {
  return static_cast< ::Bohan::BaseDefine::GroupType >(_impl_.group_type_);
}
inline ::Bohan::BaseDefine::GroupType GroupCreateReq::group_type() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateReq.group_type)
  return _internal_group_type();
}
inline void GroupCreateReq::_internal_set_group_type(::Bohan::BaseDefine::GroupType value) {
  assert(::Bohan::BaseDefine::GroupType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.group_type_ = value;
}
inline void GroupCreateReq::set_group_type(::Bohan::BaseDefine::GroupType value) {
  _internal_set_group_type(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateReq.group_type)
}

// required string group_name = 3;
inline bool GroupCreateReq::_internal_has_group_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupCreateReq::has_group_name() const {
  return _internal_has_group_name();
}
inline void GroupCreateReq::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupCreateReq::group_name() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateReq.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateReq::set_group_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateReq.group_name)
}
inline std::string* GroupCreateReq::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupCreateReq.group_name)
  return _s;
}
inline const std::string& GroupCreateReq::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupCreateReq::_internal_set_group_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateReq::_internal_mutable_group_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateReq::release_group_name() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupCreateReq.group_name)
  if (!_internal_has_group_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.group_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateReq::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupCreateReq.group_name)
}

// required string group_avatar = 4;
inline bool GroupCreateReq::_internal_has_group_avatar() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupCreateReq::has_group_avatar() const {
  return _internal_has_group_avatar();
}
inline void GroupCreateReq::clear_group_avatar() {
  _impl_.group_avatar_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GroupCreateReq::group_avatar() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateReq.group_avatar)
  return _internal_group_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateReq::set_group_avatar(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.group_avatar_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateReq.group_avatar)
}
inline std::string* GroupCreateReq::mutable_group_avatar() {
  std::string* _s = _internal_mutable_group_avatar();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupCreateReq.group_avatar)
  return _s;
}
inline const std::string& GroupCreateReq::_internal_group_avatar() const {
  return _impl_.group_avatar_.Get();
}
inline void GroupCreateReq::_internal_set_group_avatar(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateReq::_internal_mutable_group_avatar() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.group_avatar_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateReq::release_group_avatar() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupCreateReq.group_avatar)
  if (!_internal_has_group_avatar()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.group_avatar_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_avatar_.IsDefault()) {
    _impl_.group_avatar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateReq::set_allocated_group_avatar(std::string* group_avatar) {
  if (group_avatar != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.group_avatar_.SetAllocated(group_avatar, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_avatar_.IsDefault()) {
    _impl_.group_avatar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupCreateReq.group_avatar)
}

// repeated uint32 member_id_list = 5;
inline int GroupCreateReq::_internal_member_id_list_size() const {
  return _impl_.member_id_list_.size();
}
inline int GroupCreateReq::member_id_list_size() const {
  return _internal_member_id_list_size();
}
inline void GroupCreateReq::clear_member_id_list() {
  _impl_.member_id_list_.Clear();
}
inline uint32_t GroupCreateReq::_internal_member_id_list(int index) const {
  return _impl_.member_id_list_.Get(index);
}
inline uint32_t GroupCreateReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateReq.member_id_list)
  return _internal_member_id_list(index);
}
inline void GroupCreateReq::set_member_id_list(int index, uint32_t value) {
  _impl_.member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateReq.member_id_list)
}
inline void GroupCreateReq::_internal_add_member_id_list(uint32_t value) {
  _impl_.member_id_list_.Add(value);
}
inline void GroupCreateReq::add_member_id_list(uint32_t value) {
  _internal_add_member_id_list(value);
  // @@protoc_insertion_point(field_add:Bohan.Group.GroupCreateReq.member_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupCreateReq::_internal_member_id_list() const {
  return _impl_.member_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupCreateReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.GroupCreateReq.member_id_list)
  return _internal_member_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupCreateReq::_internal_mutable_member_id_list() {
  return &_impl_.member_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupCreateReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.GroupCreateReq.member_id_list)
  return _internal_mutable_member_id_list();
}

// optional bytes attach_data = 20;
inline bool GroupCreateReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupCreateReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupCreateReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GroupCreateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateReq.attach_data)
}
inline std::string* GroupCreateReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupCreateReq.attach_data)
  return _s;
}
inline const std::string& GroupCreateReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupCreateReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupCreateReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupCreateReq.attach_data)
}

// -------------------------------------------------------------------

// GroupCreateRsp

// required uint32 user_id = 1;
inline bool GroupCreateRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupCreateRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupCreateRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupCreateRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupCreateRsp::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateRsp.user_id)
  return _internal_user_id();
}
inline void GroupCreateRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_id_ = value;
}
inline void GroupCreateRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateRsp.user_id)
}

// required uint32 result_code = 2;
inline bool GroupCreateRsp::_internal_has_result_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupCreateRsp::has_result_code() const {
  return _internal_has_result_code();
}
inline void GroupCreateRsp::clear_result_code() {
  _impl_.result_code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupCreateRsp::_internal_result_code() const {
  return _impl_.result_code_;
}
inline uint32_t GroupCreateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateRsp.result_code)
  return _internal_result_code();
}
inline void GroupCreateRsp::_internal_set_result_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.result_code_ = value;
}
inline void GroupCreateRsp::set_result_code(uint32_t value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateRsp.result_code)
}

// optional uint32 group_id = 3;
inline bool GroupCreateRsp::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupCreateRsp::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupCreateRsp::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t GroupCreateRsp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupCreateRsp::group_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateRsp.group_id)
  return _internal_group_id();
}
inline void GroupCreateRsp::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.group_id_ = value;
}
inline void GroupCreateRsp::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateRsp.group_id)
}

// required string group_name = 4;
inline bool GroupCreateRsp::_internal_has_group_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupCreateRsp::has_group_name() const {
  return _internal_has_group_name();
}
inline void GroupCreateRsp::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupCreateRsp::group_name() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateRsp.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRsp::set_group_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateRsp.group_name)
}
inline std::string* GroupCreateRsp::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupCreateRsp.group_name)
  return _s;
}
inline const std::string& GroupCreateRsp::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupCreateRsp::_internal_set_group_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRsp::_internal_mutable_group_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRsp::release_group_name() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupCreateRsp.group_name)
  if (!_internal_has_group_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.group_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateRsp::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupCreateRsp.group_name)
}

// repeated uint32 user_id_list = 5;
inline int GroupCreateRsp::_internal_user_id_list_size() const {
  return _impl_.user_id_list_.size();
}
inline int GroupCreateRsp::user_id_list_size() const {
  return _internal_user_id_list_size();
}
inline void GroupCreateRsp::clear_user_id_list() {
  _impl_.user_id_list_.Clear();
}
inline uint32_t GroupCreateRsp::_internal_user_id_list(int index) const {
  return _impl_.user_id_list_.Get(index);
}
inline uint32_t GroupCreateRsp::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateRsp.user_id_list)
  return _internal_user_id_list(index);
}
inline void GroupCreateRsp::set_user_id_list(int index, uint32_t value) {
  _impl_.user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateRsp.user_id_list)
}
inline void GroupCreateRsp::_internal_add_user_id_list(uint32_t value) {
  _impl_.user_id_list_.Add(value);
}
inline void GroupCreateRsp::add_user_id_list(uint32_t value) {
  _internal_add_user_id_list(value);
  // @@protoc_insertion_point(field_add:Bohan.Group.GroupCreateRsp.user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupCreateRsp::_internal_user_id_list() const {
  return _impl_.user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupCreateRsp::user_id_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.GroupCreateRsp.user_id_list)
  return _internal_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupCreateRsp::_internal_mutable_user_id_list() {
  return &_impl_.user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupCreateRsp::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.GroupCreateRsp.user_id_list)
  return _internal_mutable_user_id_list();
}

// optional bytes attach_data = 20;
inline bool GroupCreateRsp::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupCreateRsp::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupCreateRsp::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GroupCreateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupCreateRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupCreateRsp.attach_data)
}
inline std::string* GroupCreateRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupCreateRsp.attach_data)
  return _s;
}
inline const std::string& GroupCreateRsp::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupCreateRsp::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRsp::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupCreateRsp.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupCreateRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupCreateRsp.attach_data)
}

// -------------------------------------------------------------------

// GroupChangeMemberReq

// required uint32 user_id = 1;
inline bool GroupChangeMemberReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupChangeMemberReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupChangeMemberReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupChangeMemberReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupChangeMemberReq::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberReq.user_id)
  return _internal_user_id();
}
inline void GroupChangeMemberReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void GroupChangeMemberReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberReq.user_id)
}

// required .Bohan.BaseDefine.GroupModifyType change_type = 2;
inline bool GroupChangeMemberReq::_internal_has_change_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupChangeMemberReq::has_change_type() const {
  return _internal_has_change_type();
}
inline void GroupChangeMemberReq::clear_change_type() {
  _impl_.change_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Bohan::BaseDefine::GroupModifyType GroupChangeMemberReq::_internal_change_type() const {
  return static_cast< ::Bohan::BaseDefine::GroupModifyType >(_impl_.change_type_);
}
inline ::Bohan::BaseDefine::GroupModifyType GroupChangeMemberReq::change_type() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberReq.change_type)
  return _internal_change_type();
}
inline void GroupChangeMemberReq::_internal_set_change_type(::Bohan::BaseDefine::GroupModifyType value) {
  assert(::Bohan::BaseDefine::GroupModifyType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.change_type_ = value;
}
inline void GroupChangeMemberReq::set_change_type(::Bohan::BaseDefine::GroupModifyType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberReq.change_type)
}

// required uint32 group_id = 3;
inline bool GroupChangeMemberReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupChangeMemberReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupChangeMemberReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupChangeMemberReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupChangeMemberReq::group_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberReq.group_id)
  return _internal_group_id();
}
inline void GroupChangeMemberReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.group_id_ = value;
}
inline void GroupChangeMemberReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberReq.group_id)
}

// repeated uint32 member_id_list = 4;
inline int GroupChangeMemberReq::_internal_member_id_list_size() const {
  return _impl_.member_id_list_.size();
}
inline int GroupChangeMemberReq::member_id_list_size() const {
  return _internal_member_id_list_size();
}
inline void GroupChangeMemberReq::clear_member_id_list() {
  _impl_.member_id_list_.Clear();
}
inline uint32_t GroupChangeMemberReq::_internal_member_id_list(int index) const {
  return _impl_.member_id_list_.Get(index);
}
inline uint32_t GroupChangeMemberReq::member_id_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberReq.member_id_list)
  return _internal_member_id_list(index);
}
inline void GroupChangeMemberReq::set_member_id_list(int index, uint32_t value) {
  _impl_.member_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberReq.member_id_list)
}
inline void GroupChangeMemberReq::_internal_add_member_id_list(uint32_t value) {
  _impl_.member_id_list_.Add(value);
}
inline void GroupChangeMemberReq::add_member_id_list(uint32_t value) {
  _internal_add_member_id_list(value);
  // @@protoc_insertion_point(field_add:Bohan.Group.GroupChangeMemberReq.member_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberReq::_internal_member_id_list() const {
  return _impl_.member_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberReq::member_id_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.GroupChangeMemberReq.member_id_list)
  return _internal_member_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberReq::_internal_mutable_member_id_list() {
  return &_impl_.member_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberReq::mutable_member_id_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.GroupChangeMemberReq.member_id_list)
  return _internal_mutable_member_id_list();
}

// optional bytes attach_data = 20;
inline bool GroupChangeMemberReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupChangeMemberReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupChangeMemberReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupChangeMemberReq::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupChangeMemberReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberReq.attach_data)
}
inline std::string* GroupChangeMemberReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupChangeMemberReq.attach_data)
  return _s;
}
inline const std::string& GroupChangeMemberReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupChangeMemberReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupChangeMemberReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupChangeMemberReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupChangeMemberReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupChangeMemberReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupChangeMemberReq.attach_data)
}

// -------------------------------------------------------------------

// GroupChangeMemberRsp

// required uint32 user_id = 1;
inline bool GroupChangeMemberRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupChangeMemberRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupChangeMemberRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupChangeMemberRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupChangeMemberRsp::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberRsp.user_id)
  return _internal_user_id();
}
inline void GroupChangeMemberRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void GroupChangeMemberRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberRsp.user_id)
}

// required .Bohan.BaseDefine.GroupModifyType change_type = 2;
inline bool GroupChangeMemberRsp::_internal_has_change_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupChangeMemberRsp::has_change_type() const {
  return _internal_has_change_type();
}
inline void GroupChangeMemberRsp::clear_change_type() {
  _impl_.change_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Bohan::BaseDefine::GroupModifyType GroupChangeMemberRsp::_internal_change_type() const {
  return static_cast< ::Bohan::BaseDefine::GroupModifyType >(_impl_.change_type_);
}
inline ::Bohan::BaseDefine::GroupModifyType GroupChangeMemberRsp::change_type() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberRsp.change_type)
  return _internal_change_type();
}
inline void GroupChangeMemberRsp::_internal_set_change_type(::Bohan::BaseDefine::GroupModifyType value) {
  assert(::Bohan::BaseDefine::GroupModifyType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.change_type_ = value;
}
inline void GroupChangeMemberRsp::set_change_type(::Bohan::BaseDefine::GroupModifyType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberRsp.change_type)
}

// required uint32 result_code = 3;
inline bool GroupChangeMemberRsp::_internal_has_result_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupChangeMemberRsp::has_result_code() const {
  return _internal_has_result_code();
}
inline void GroupChangeMemberRsp::clear_result_code() {
  _impl_.result_code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupChangeMemberRsp::_internal_result_code() const {
  return _impl_.result_code_;
}
inline uint32_t GroupChangeMemberRsp::result_code() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberRsp.result_code)
  return _internal_result_code();
}
inline void GroupChangeMemberRsp::_internal_set_result_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.result_code_ = value;
}
inline void GroupChangeMemberRsp::set_result_code(uint32_t value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberRsp.result_code)
}

// required uint32 group_id = 4;
inline bool GroupChangeMemberRsp::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GroupChangeMemberRsp::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupChangeMemberRsp::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t GroupChangeMemberRsp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupChangeMemberRsp::group_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberRsp.group_id)
  return _internal_group_id();
}
inline void GroupChangeMemberRsp::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.group_id_ = value;
}
inline void GroupChangeMemberRsp::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberRsp.group_id)
}

// repeated uint32 cur_user_id_list = 5;
inline int GroupChangeMemberRsp::_internal_cur_user_id_list_size() const {
  return _impl_.cur_user_id_list_.size();
}
inline int GroupChangeMemberRsp::cur_user_id_list_size() const {
  return _internal_cur_user_id_list_size();
}
inline void GroupChangeMemberRsp::clear_cur_user_id_list() {
  _impl_.cur_user_id_list_.Clear();
}
inline uint32_t GroupChangeMemberRsp::_internal_cur_user_id_list(int index) const {
  return _impl_.cur_user_id_list_.Get(index);
}
inline uint32_t GroupChangeMemberRsp::cur_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberRsp.cur_user_id_list)
  return _internal_cur_user_id_list(index);
}
inline void GroupChangeMemberRsp::set_cur_user_id_list(int index, uint32_t value) {
  _impl_.cur_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberRsp.cur_user_id_list)
}
inline void GroupChangeMemberRsp::_internal_add_cur_user_id_list(uint32_t value) {
  _impl_.cur_user_id_list_.Add(value);
}
inline void GroupChangeMemberRsp::add_cur_user_id_list(uint32_t value) {
  _internal_add_cur_user_id_list(value);
  // @@protoc_insertion_point(field_add:Bohan.Group.GroupChangeMemberRsp.cur_user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberRsp::_internal_cur_user_id_list() const {
  return _impl_.cur_user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberRsp::cur_user_id_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.GroupChangeMemberRsp.cur_user_id_list)
  return _internal_cur_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberRsp::_internal_mutable_cur_user_id_list() {
  return &_impl_.cur_user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberRsp::mutable_cur_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.GroupChangeMemberRsp.cur_user_id_list)
  return _internal_mutable_cur_user_id_list();
}

// repeated uint32 chg_user_id_list = 6;
inline int GroupChangeMemberRsp::_internal_chg_user_id_list_size() const {
  return _impl_.chg_user_id_list_.size();
}
inline int GroupChangeMemberRsp::chg_user_id_list_size() const {
  return _internal_chg_user_id_list_size();
}
inline void GroupChangeMemberRsp::clear_chg_user_id_list() {
  _impl_.chg_user_id_list_.Clear();
}
inline uint32_t GroupChangeMemberRsp::_internal_chg_user_id_list(int index) const {
  return _impl_.chg_user_id_list_.Get(index);
}
inline uint32_t GroupChangeMemberRsp::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberRsp.chg_user_id_list)
  return _internal_chg_user_id_list(index);
}
inline void GroupChangeMemberRsp::set_chg_user_id_list(int index, uint32_t value) {
  _impl_.chg_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberRsp.chg_user_id_list)
}
inline void GroupChangeMemberRsp::_internal_add_chg_user_id_list(uint32_t value) {
  _impl_.chg_user_id_list_.Add(value);
}
inline void GroupChangeMemberRsp::add_chg_user_id_list(uint32_t value) {
  _internal_add_chg_user_id_list(value);
  // @@protoc_insertion_point(field_add:Bohan.Group.GroupChangeMemberRsp.chg_user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberRsp::_internal_chg_user_id_list() const {
  return _impl_.chg_user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberRsp::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.GroupChangeMemberRsp.chg_user_id_list)
  return _internal_chg_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberRsp::_internal_mutable_chg_user_id_list() {
  return &_impl_.chg_user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberRsp::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.GroupChangeMemberRsp.chg_user_id_list)
  return _internal_mutable_chg_user_id_list();
}

// optional bytes attach_data = 20;
inline bool GroupChangeMemberRsp::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupChangeMemberRsp::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupChangeMemberRsp::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupChangeMemberRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupChangeMemberRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberRsp.attach_data)
}
inline std::string* GroupChangeMemberRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupChangeMemberRsp.attach_data)
  return _s;
}
inline const std::string& GroupChangeMemberRsp::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupChangeMemberRsp::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupChangeMemberRsp::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupChangeMemberRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupChangeMemberRsp.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupChangeMemberRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupChangeMemberRsp.attach_data)
}

// -------------------------------------------------------------------

// GroupShieldReq

// required uint32 user_id = 1;
inline bool GroupShieldReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupShieldReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupShieldReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupShieldReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupShieldReq.user_id)
  return _internal_user_id();
}
inline void GroupShieldReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void GroupShieldReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupShieldReq.user_id)
}

// required uint32 group_id = 2;
inline bool GroupShieldReq::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupShieldReq::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupShieldReq::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupShieldReq::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupShieldReq::group_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupShieldReq.group_id)
  return _internal_group_id();
}
inline void GroupShieldReq::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void GroupShieldReq::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupShieldReq.group_id)
}

// required uint32 shield_status = 3;
inline bool GroupShieldReq::_internal_has_shield_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupShieldReq::has_shield_status() const {
  return _internal_has_shield_status();
}
inline void GroupShieldReq::clear_shield_status() {
  _impl_.shield_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupShieldReq::_internal_shield_status() const {
  return _impl_.shield_status_;
}
inline uint32_t GroupShieldReq::shield_status() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupShieldReq.shield_status)
  return _internal_shield_status();
}
inline void GroupShieldReq::_internal_set_shield_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.shield_status_ = value;
}
inline void GroupShieldReq::set_shield_status(uint32_t value) {
  _internal_set_shield_status(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupShieldReq.shield_status)
}

// optional bytes attach_data = 20;
inline bool GroupShieldReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupShieldReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupShieldReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupShieldReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupShieldReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupShieldReq.attach_data)
}
inline std::string* GroupShieldReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupShieldReq.attach_data)
  return _s;
}
inline const std::string& GroupShieldReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupShieldReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupShieldReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupShieldReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupShieldReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupShieldReq.attach_data)
}

// -------------------------------------------------------------------

// GroupShieldRsp

// required uint32 user_id = 1;
inline bool GroupShieldRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupShieldRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupShieldRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t GroupShieldRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupShieldRsp.user_id)
  return _internal_user_id();
}
inline void GroupShieldRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void GroupShieldRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupShieldRsp.user_id)
}

// required uint32 group_id = 2;
inline bool GroupShieldRsp::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupShieldRsp::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupShieldRsp::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupShieldRsp::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupShieldRsp::group_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupShieldRsp.group_id)
  return _internal_group_id();
}
inline void GroupShieldRsp::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void GroupShieldRsp::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupShieldRsp.group_id)
}

// required uint32 result_code = 3;
inline bool GroupShieldRsp::_internal_has_result_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupShieldRsp::has_result_code() const {
  return _internal_has_result_code();
}
inline void GroupShieldRsp::clear_result_code() {
  _impl_.result_code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GroupShieldRsp::_internal_result_code() const {
  return _impl_.result_code_;
}
inline uint32_t GroupShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupShieldRsp.result_code)
  return _internal_result_code();
}
inline void GroupShieldRsp::_internal_set_result_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.result_code_ = value;
}
inline void GroupShieldRsp::set_result_code(uint32_t value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupShieldRsp.result_code)
}

// optional bytes attach_data = 20;
inline bool GroupShieldRsp::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupShieldRsp::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void GroupShieldRsp::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupShieldRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupShieldRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupShieldRsp.attach_data)
}
inline std::string* GroupShieldRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.Group.GroupShieldRsp.attach_data)
  return _s;
}
inline const std::string& GroupShieldRsp::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void GroupShieldRsp::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupShieldRsp::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.Group.GroupShieldRsp.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GroupShieldRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.Group.GroupShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// GroupChangeMemberNotify

// required uint32 user_id = 1;
inline bool GroupChangeMemberNotify::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GroupChangeMemberNotify::has_user_id() const {
  return _internal_has_user_id();
}
inline void GroupChangeMemberNotify::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t GroupChangeMemberNotify::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t GroupChangeMemberNotify::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberNotify.user_id)
  return _internal_user_id();
}
inline void GroupChangeMemberNotify::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_id_ = value;
}
inline void GroupChangeMemberNotify::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberNotify.user_id)
}

// required .Bohan.BaseDefine.GroupModifyType change_type = 2;
inline bool GroupChangeMemberNotify::_internal_has_change_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupChangeMemberNotify::has_change_type() const {
  return _internal_has_change_type();
}
inline void GroupChangeMemberNotify::clear_change_type() {
  _impl_.change_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Bohan::BaseDefine::GroupModifyType GroupChangeMemberNotify::_internal_change_type() const {
  return static_cast< ::Bohan::BaseDefine::GroupModifyType >(_impl_.change_type_);
}
inline ::Bohan::BaseDefine::GroupModifyType GroupChangeMemberNotify::change_type() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberNotify.change_type)
  return _internal_change_type();
}
inline void GroupChangeMemberNotify::_internal_set_change_type(::Bohan::BaseDefine::GroupModifyType value) {
  assert(::Bohan::BaseDefine::GroupModifyType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.change_type_ = value;
}
inline void GroupChangeMemberNotify::set_change_type(::Bohan::BaseDefine::GroupModifyType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberNotify.change_type)
}

// required uint32 group_id = 3;
inline bool GroupChangeMemberNotify::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GroupChangeMemberNotify::has_group_id() const {
  return _internal_has_group_id();
}
inline void GroupChangeMemberNotify::clear_group_id() {
  _impl_.group_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t GroupChangeMemberNotify::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t GroupChangeMemberNotify::group_id() const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberNotify.group_id)
  return _internal_group_id();
}
inline void GroupChangeMemberNotify::_internal_set_group_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}
inline void GroupChangeMemberNotify::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberNotify.group_id)
}

// repeated uint32 cur_user_id_list = 4;
inline int GroupChangeMemberNotify::_internal_cur_user_id_list_size() const {
  return _impl_.cur_user_id_list_.size();
}
inline int GroupChangeMemberNotify::cur_user_id_list_size() const {
  return _internal_cur_user_id_list_size();
}
inline void GroupChangeMemberNotify::clear_cur_user_id_list() {
  _impl_.cur_user_id_list_.Clear();
}
inline uint32_t GroupChangeMemberNotify::_internal_cur_user_id_list(int index) const {
  return _impl_.cur_user_id_list_.Get(index);
}
inline uint32_t GroupChangeMemberNotify::cur_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberNotify.cur_user_id_list)
  return _internal_cur_user_id_list(index);
}
inline void GroupChangeMemberNotify::set_cur_user_id_list(int index, uint32_t value) {
  _impl_.cur_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberNotify.cur_user_id_list)
}
inline void GroupChangeMemberNotify::_internal_add_cur_user_id_list(uint32_t value) {
  _impl_.cur_user_id_list_.Add(value);
}
inline void GroupChangeMemberNotify::add_cur_user_id_list(uint32_t value) {
  _internal_add_cur_user_id_list(value);
  // @@protoc_insertion_point(field_add:Bohan.Group.GroupChangeMemberNotify.cur_user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberNotify::_internal_cur_user_id_list() const {
  return _impl_.cur_user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberNotify::cur_user_id_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.GroupChangeMemberNotify.cur_user_id_list)
  return _internal_cur_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberNotify::_internal_mutable_cur_user_id_list() {
  return &_impl_.cur_user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberNotify::mutable_cur_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.GroupChangeMemberNotify.cur_user_id_list)
  return _internal_mutable_cur_user_id_list();
}

// repeated uint32 chg_user_id_list = 5;
inline int GroupChangeMemberNotify::_internal_chg_user_id_list_size() const {
  return _impl_.chg_user_id_list_.size();
}
inline int GroupChangeMemberNotify::chg_user_id_list_size() const {
  return _internal_chg_user_id_list_size();
}
inline void GroupChangeMemberNotify::clear_chg_user_id_list() {
  _impl_.chg_user_id_list_.Clear();
}
inline uint32_t GroupChangeMemberNotify::_internal_chg_user_id_list(int index) const {
  return _impl_.chg_user_id_list_.Get(index);
}
inline uint32_t GroupChangeMemberNotify::chg_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.Group.GroupChangeMemberNotify.chg_user_id_list)
  return _internal_chg_user_id_list(index);
}
inline void GroupChangeMemberNotify::set_chg_user_id_list(int index, uint32_t value) {
  _impl_.chg_user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:Bohan.Group.GroupChangeMemberNotify.chg_user_id_list)
}
inline void GroupChangeMemberNotify::_internal_add_chg_user_id_list(uint32_t value) {
  _impl_.chg_user_id_list_.Add(value);
}
inline void GroupChangeMemberNotify::add_chg_user_id_list(uint32_t value) {
  _internal_add_chg_user_id_list(value);
  // @@protoc_insertion_point(field_add:Bohan.Group.GroupChangeMemberNotify.chg_user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberNotify::_internal_chg_user_id_list() const {
  return _impl_.chg_user_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GroupChangeMemberNotify::chg_user_id_list() const {
  // @@protoc_insertion_point(field_list:Bohan.Group.GroupChangeMemberNotify.chg_user_id_list)
  return _internal_chg_user_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberNotify::_internal_mutable_chg_user_id_list() {
  return &_impl_.chg_user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GroupChangeMemberNotify::mutable_chg_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.Group.GroupChangeMemberNotify.chg_user_id_list)
  return _internal_mutable_chg_user_id_list();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Group
}  // namespace Bohan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Group_2eproto
