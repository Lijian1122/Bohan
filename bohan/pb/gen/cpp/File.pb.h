// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: File.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_File_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_File_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_File_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_File_2eproto {
  static const uint32_t offsets[];
};
namespace Bohan {
namespace File {
class FileAddOfflineReq;
struct FileAddOfflineReqDefaultTypeInternal;
extern FileAddOfflineReqDefaultTypeInternal _FileAddOfflineReq_default_instance_;
class FileDelOfflineReq;
struct FileDelOfflineReqDefaultTypeInternal;
extern FileDelOfflineReqDefaultTypeInternal _FileDelOfflineReq_default_instance_;
class FileHasOfflineReq;
struct FileHasOfflineReqDefaultTypeInternal;
extern FileHasOfflineReqDefaultTypeInternal _FileHasOfflineReq_default_instance_;
class FileHasOfflineRsp;
struct FileHasOfflineRspDefaultTypeInternal;
extern FileHasOfflineRspDefaultTypeInternal _FileHasOfflineRsp_default_instance_;
class FileLoginReq;
struct FileLoginReqDefaultTypeInternal;
extern FileLoginReqDefaultTypeInternal _FileLoginReq_default_instance_;
class FileLoginRsp;
struct FileLoginRspDefaultTypeInternal;
extern FileLoginRspDefaultTypeInternal _FileLoginRsp_default_instance_;
class FileNotify;
struct FileNotifyDefaultTypeInternal;
extern FileNotifyDefaultTypeInternal _FileNotify_default_instance_;
class FilePullDataReq;
struct FilePullDataReqDefaultTypeInternal;
extern FilePullDataReqDefaultTypeInternal _FilePullDataReq_default_instance_;
class FilePullDataRsp;
struct FilePullDataRspDefaultTypeInternal;
extern FilePullDataRspDefaultTypeInternal _FilePullDataRsp_default_instance_;
class FileReq;
struct FileReqDefaultTypeInternal;
extern FileReqDefaultTypeInternal _FileReq_default_instance_;
class FileRsp;
struct FileRspDefaultTypeInternal;
extern FileRspDefaultTypeInternal _FileRsp_default_instance_;
class FileState;
struct FileStateDefaultTypeInternal;
extern FileStateDefaultTypeInternal _FileState_default_instance_;
}  // namespace File
}  // namespace Bohan
PROTOBUF_NAMESPACE_OPEN
template<> ::Bohan::File::FileAddOfflineReq* Arena::CreateMaybeMessage<::Bohan::File::FileAddOfflineReq>(Arena*);
template<> ::Bohan::File::FileDelOfflineReq* Arena::CreateMaybeMessage<::Bohan::File::FileDelOfflineReq>(Arena*);
template<> ::Bohan::File::FileHasOfflineReq* Arena::CreateMaybeMessage<::Bohan::File::FileHasOfflineReq>(Arena*);
template<> ::Bohan::File::FileHasOfflineRsp* Arena::CreateMaybeMessage<::Bohan::File::FileHasOfflineRsp>(Arena*);
template<> ::Bohan::File::FileLoginReq* Arena::CreateMaybeMessage<::Bohan::File::FileLoginReq>(Arena*);
template<> ::Bohan::File::FileLoginRsp* Arena::CreateMaybeMessage<::Bohan::File::FileLoginRsp>(Arena*);
template<> ::Bohan::File::FileNotify* Arena::CreateMaybeMessage<::Bohan::File::FileNotify>(Arena*);
template<> ::Bohan::File::FilePullDataReq* Arena::CreateMaybeMessage<::Bohan::File::FilePullDataReq>(Arena*);
template<> ::Bohan::File::FilePullDataRsp* Arena::CreateMaybeMessage<::Bohan::File::FilePullDataRsp>(Arena*);
template<> ::Bohan::File::FileReq* Arena::CreateMaybeMessage<::Bohan::File::FileReq>(Arena*);
template<> ::Bohan::File::FileRsp* Arena::CreateMaybeMessage<::Bohan::File::FileRsp>(Arena*);
template<> ::Bohan::File::FileState* Arena::CreateMaybeMessage<::Bohan::File::FileState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Bohan {
namespace File {

// ===================================================================

class FileLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileLoginReq) */ {
 public:
  inline FileLoginReq() : FileLoginReq(nullptr) {}
  ~FileLoginReq() override;
  explicit PROTOBUF_CONSTEXPR FileLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileLoginReq(const FileLoginReq& from);
  FileLoginReq(FileLoginReq&& from) noexcept
    : FileLoginReq() {
    *this = ::std::move(from);
  }

  inline FileLoginReq& operator=(const FileLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileLoginReq& operator=(FileLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileLoginReq* internal_default_instance() {
    return reinterpret_cast<const FileLoginReq*>(
               &_FileLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileLoginReq& a, FileLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileLoginReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileLoginReq& from);
  void MergeFrom(const FileLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileLoginReq";
  }
  protected:
  explicit FileLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kFileRoleFieldNumber = 3,
  };
  // required string task_id = 2;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required .Bohan.BaseDefine.ClientFileRole file_role = 3;
  bool has_file_role() const;
  private:
  bool _internal_has_file_role() const;
  public:
  void clear_file_role();
  ::Bohan::BaseDefine::ClientFileRole file_role() const;
  void set_file_role(::Bohan::BaseDefine::ClientFileRole value);
  private:
  ::Bohan::BaseDefine::ClientFileRole _internal_file_role() const;
  void _internal_set_file_role(::Bohan::BaseDefine::ClientFileRole value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileLoginReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    uint32_t user_id_;
    int file_role_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FileLoginRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileLoginRsp) */ {
 public:
  inline FileLoginRsp() : FileLoginRsp(nullptr) {}
  ~FileLoginRsp() override;
  explicit PROTOBUF_CONSTEXPR FileLoginRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileLoginRsp(const FileLoginRsp& from);
  FileLoginRsp(FileLoginRsp&& from) noexcept
    : FileLoginRsp() {
    *this = ::std::move(from);
  }

  inline FileLoginRsp& operator=(const FileLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileLoginRsp& operator=(FileLoginRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileLoginRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileLoginRsp* internal_default_instance() {
    return reinterpret_cast<const FileLoginRsp*>(
               &_FileLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileLoginRsp& a, FileLoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileLoginRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileLoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileLoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileLoginRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileLoginRsp& from);
  void MergeFrom(const FileLoginRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileLoginRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileLoginRsp";
  }
  protected:
  explicit FileLoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kResultCodeFieldNumber = 1,
  };
  // required string task_id = 2;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required uint32 result_code = 1;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  uint32_t result_code() const;
  void set_result_code(uint32_t value);
  private:
  uint32_t _internal_result_code() const;
  void _internal_set_result_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileLoginRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    uint32_t result_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FileState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileState) */ {
 public:
  inline FileState() : FileState(nullptr) {}
  ~FileState() override;
  explicit PROTOBUF_CONSTEXPR FileState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileState(const FileState& from);
  FileState(FileState&& from) noexcept
    : FileState() {
    *this = ::std::move(from);
  }

  inline FileState& operator=(const FileState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileState& operator=(FileState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileState& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileState* internal_default_instance() {
    return reinterpret_cast<const FileState*>(
               &_FileState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileState& a, FileState& b) {
    a.Swap(&b);
  }
  inline void Swap(FileState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileState& from);
  void MergeFrom(const FileState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileState";
  }
  protected:
  explicit FileState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kStateFieldNumber = 1,
    kUserIdFieldNumber = 3,
  };
  // required string task_id = 2;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required .Bohan.BaseDefine.ClientFileState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::Bohan::BaseDefine::ClientFileState state() const;
  void set_state(::Bohan::BaseDefine::ClientFileState value);
  private:
  ::Bohan::BaseDefine::ClientFileState _internal_state() const;
  void _internal_set_state(::Bohan::BaseDefine::ClientFileState value);
  public:

  // required uint32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    int state_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FilePullDataReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FilePullDataReq) */ {
 public:
  inline FilePullDataReq() : FilePullDataReq(nullptr) {}
  ~FilePullDataReq() override;
  explicit PROTOBUF_CONSTEXPR FilePullDataReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilePullDataReq(const FilePullDataReq& from);
  FilePullDataReq(FilePullDataReq&& from) noexcept
    : FilePullDataReq() {
    *this = ::std::move(from);
  }

  inline FilePullDataReq& operator=(const FilePullDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePullDataReq& operator=(FilePullDataReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FilePullDataReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilePullDataReq* internal_default_instance() {
    return reinterpret_cast<const FilePullDataReq*>(
               &_FilePullDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FilePullDataReq& a, FilePullDataReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePullDataReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilePullDataReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilePullDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilePullDataReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FilePullDataReq& from);
  void MergeFrom(const FilePullDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilePullDataReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FilePullDataReq";
  }
  protected:
  explicit FilePullDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kTransModeFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kDataSizeFieldNumber = 5,
  };
  // required string task_id = 1;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required uint32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required .Bohan.BaseDefine.FileType trans_mode = 3;
  bool has_trans_mode() const;
  private:
  bool _internal_has_trans_mode() const;
  public:
  void clear_trans_mode();
  ::Bohan::BaseDefine::FileType trans_mode() const;
  void set_trans_mode(::Bohan::BaseDefine::FileType value);
  private:
  ::Bohan::BaseDefine::FileType _internal_trans_mode() const;
  void _internal_set_trans_mode(::Bohan::BaseDefine::FileType value);
  public:

  // required uint32 offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  uint32_t offset() const;
  void set_offset(uint32_t value);
  private:
  uint32_t _internal_offset() const;
  void _internal_set_offset(uint32_t value);
  public:

  // required uint32 data_size = 5;
  bool has_data_size() const;
  private:
  bool _internal_has_data_size() const;
  public:
  void clear_data_size();
  uint32_t data_size() const;
  void set_data_size(uint32_t value);
  private:
  uint32_t _internal_data_size() const;
  void _internal_set_data_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FilePullDataReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    uint32_t user_id_;
    int trans_mode_;
    uint32_t offset_;
    uint32_t data_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FilePullDataRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FilePullDataRsp) */ {
 public:
  inline FilePullDataRsp() : FilePullDataRsp(nullptr) {}
  ~FilePullDataRsp() override;
  explicit PROTOBUF_CONSTEXPR FilePullDataRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilePullDataRsp(const FilePullDataRsp& from);
  FilePullDataRsp(FilePullDataRsp&& from) noexcept
    : FilePullDataRsp() {
    *this = ::std::move(from);
  }

  inline FilePullDataRsp& operator=(const FilePullDataRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePullDataRsp& operator=(FilePullDataRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FilePullDataRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilePullDataRsp* internal_default_instance() {
    return reinterpret_cast<const FilePullDataRsp*>(
               &_FilePullDataRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FilePullDataRsp& a, FilePullDataRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePullDataRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilePullDataRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilePullDataRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilePullDataRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FilePullDataRsp& from);
  void MergeFrom(const FilePullDataRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilePullDataRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FilePullDataRsp";
  }
  protected:
  explicit FilePullDataRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kDataFieldNumber = 5,
    kResultCodeFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kOffsetFieldNumber = 4,
  };
  // required string task_id = 2;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required bytes data = 5;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required uint32 result_code = 1;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  uint32_t result_code() const;
  void set_result_code(uint32_t value);
  private:
  uint32_t _internal_result_code() const;
  void _internal_set_result_code(uint32_t value);
  public:

  // required uint32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // required uint32 offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  uint32_t offset() const;
  void set_offset(uint32_t value);
  private:
  uint32_t _internal_offset() const;
  void _internal_set_offset(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FilePullDataRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t result_code_;
    uint32_t user_id_;
    uint32_t offset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FileReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileReq) */ {
 public:
  inline FileReq() : FileReq(nullptr) {}
  ~FileReq() override;
  explicit PROTOBUF_CONSTEXPR FileReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileReq(const FileReq& from);
  FileReq(FileReq&& from) noexcept
    : FileReq() {
    *this = ::std::move(from);
  }

  inline FileReq& operator=(const FileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileReq& operator=(FileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileReq* internal_default_instance() {
    return reinterpret_cast<const FileReq*>(
               &_FileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FileReq& a, FileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileReq& from);
  void MergeFrom(const FileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileReq";
  }
  protected:
  explicit FileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kFromUserIdFieldNumber = 1,
    kToUserIdFieldNumber = 2,
    kFileSizeFieldNumber = 4,
    kTransModeFieldNumber = 5,
  };
  // required string file_name = 3;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // required uint32 from_user_id = 1;
  bool has_from_user_id() const;
  private:
  bool _internal_has_from_user_id() const;
  public:
  void clear_from_user_id();
  uint32_t from_user_id() const;
  void set_from_user_id(uint32_t value);
  private:
  uint32_t _internal_from_user_id() const;
  void _internal_set_from_user_id(uint32_t value);
  public:

  // required uint32 to_user_id = 2;
  bool has_to_user_id() const;
  private:
  bool _internal_has_to_user_id() const;
  public:
  void clear_to_user_id();
  uint32_t to_user_id() const;
  void set_to_user_id(uint32_t value);
  private:
  uint32_t _internal_to_user_id() const;
  void _internal_set_to_user_id(uint32_t value);
  public:

  // required uint32 file_size = 4;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // required .Bohan.BaseDefine.FileType trans_mode = 5;
  bool has_trans_mode() const;
  private:
  bool _internal_has_trans_mode() const;
  public:
  void clear_trans_mode();
  ::Bohan::BaseDefine::FileType trans_mode() const;
  void set_trans_mode(::Bohan::BaseDefine::FileType value);
  private:
  ::Bohan::BaseDefine::FileType _internal_trans_mode() const;
  void _internal_set_trans_mode(::Bohan::BaseDefine::FileType value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    uint32_t from_user_id_;
    uint32_t to_user_id_;
    uint32_t file_size_;
    int trans_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FileRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileRsp) */ {
 public:
  inline FileRsp() : FileRsp(nullptr) {}
  ~FileRsp() override;
  explicit PROTOBUF_CONSTEXPR FileRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileRsp(const FileRsp& from);
  FileRsp(FileRsp&& from) noexcept
    : FileRsp() {
    *this = ::std::move(from);
  }

  inline FileRsp& operator=(const FileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileRsp& operator=(FileRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileRsp* internal_default_instance() {
    return reinterpret_cast<const FileRsp*>(
               &_FileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FileRsp& a, FileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileRsp& from);
  void MergeFrom(const FileRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileRsp";
  }
  protected:
  explicit FileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddrListFieldNumber = 6,
    kFileNameFieldNumber = 4,
    kTaskIdFieldNumber = 5,
    kResultCodeFieldNumber = 1,
    kFromUserIdFieldNumber = 2,
    kToUserIdFieldNumber = 3,
    kTransModeFieldNumber = 7,
  };
  // repeated .Bohan.BaseDefine.IpAddr ip_addr_list = 6;
  int ip_addr_list_size() const;
  private:
  int _internal_ip_addr_list_size() const;
  public:
  void clear_ip_addr_list();
  ::Bohan::BaseDefine::IpAddr* mutable_ip_addr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >*
      mutable_ip_addr_list();
  private:
  const ::Bohan::BaseDefine::IpAddr& _internal_ip_addr_list(int index) const;
  ::Bohan::BaseDefine::IpAddr* _internal_add_ip_addr_list();
  public:
  const ::Bohan::BaseDefine::IpAddr& ip_addr_list(int index) const;
  ::Bohan::BaseDefine::IpAddr* add_ip_addr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >&
      ip_addr_list() const;

  // required string file_name = 4;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // required string task_id = 5;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required uint32 result_code = 1;
  bool has_result_code() const;
  private:
  bool _internal_has_result_code() const;
  public:
  void clear_result_code();
  uint32_t result_code() const;
  void set_result_code(uint32_t value);
  private:
  uint32_t _internal_result_code() const;
  void _internal_set_result_code(uint32_t value);
  public:

  // required uint32 from_user_id = 2;
  bool has_from_user_id() const;
  private:
  bool _internal_has_from_user_id() const;
  public:
  void clear_from_user_id();
  uint32_t from_user_id() const;
  void set_from_user_id(uint32_t value);
  private:
  uint32_t _internal_from_user_id() const;
  void _internal_set_from_user_id(uint32_t value);
  public:

  // required uint32 to_user_id = 3;
  bool has_to_user_id() const;
  private:
  bool _internal_has_to_user_id() const;
  public:
  void clear_to_user_id();
  uint32_t to_user_id() const;
  void set_to_user_id(uint32_t value);
  private:
  uint32_t _internal_to_user_id() const;
  void _internal_set_to_user_id(uint32_t value);
  public:

  // required .Bohan.BaseDefine.FileType trans_mode = 7;
  bool has_trans_mode() const;
  private:
  bool _internal_has_trans_mode() const;
  public:
  void clear_trans_mode();
  ::Bohan::BaseDefine::FileType trans_mode() const;
  void set_trans_mode(::Bohan::BaseDefine::FileType value);
  private:
  ::Bohan::BaseDefine::FileType _internal_trans_mode() const;
  void _internal_set_trans_mode(::Bohan::BaseDefine::FileType value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr > ip_addr_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    uint32_t result_code_;
    uint32_t from_user_id_;
    uint32_t to_user_id_;
    int trans_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FileNotify final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileNotify) */ {
 public:
  inline FileNotify() : FileNotify(nullptr) {}
  ~FileNotify() override;
  explicit PROTOBUF_CONSTEXPR FileNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileNotify(const FileNotify& from);
  FileNotify(FileNotify&& from) noexcept
    : FileNotify() {
    *this = ::std::move(from);
  }

  inline FileNotify& operator=(const FileNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileNotify& operator=(FileNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileNotify* internal_default_instance() {
    return reinterpret_cast<const FileNotify*>(
               &_FileNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FileNotify& a, FileNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(FileNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileNotify& from);
  void MergeFrom(const FileNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileNotify";
  }
  protected:
  explicit FileNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddrListFieldNumber = 6,
    kFileNameFieldNumber = 3,
    kTaskIdFieldNumber = 5,
    kFromUserIdFieldNumber = 1,
    kToUserIdFieldNumber = 2,
    kFileSizeFieldNumber = 4,
    kTransModeFieldNumber = 7,
    kOfflineReadyFieldNumber = 8,
  };
  // repeated .Bohan.BaseDefine.IpAddr ip_addr_list = 6;
  int ip_addr_list_size() const;
  private:
  int _internal_ip_addr_list_size() const;
  public:
  void clear_ip_addr_list();
  ::Bohan::BaseDefine::IpAddr* mutable_ip_addr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >*
      mutable_ip_addr_list();
  private:
  const ::Bohan::BaseDefine::IpAddr& _internal_ip_addr_list(int index) const;
  ::Bohan::BaseDefine::IpAddr* _internal_add_ip_addr_list();
  public:
  const ::Bohan::BaseDefine::IpAddr& ip_addr_list(int index) const;
  ::Bohan::BaseDefine::IpAddr* add_ip_addr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >&
      ip_addr_list() const;

  // required string file_name = 3;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // required string task_id = 5;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required uint32 from_user_id = 1;
  bool has_from_user_id() const;
  private:
  bool _internal_has_from_user_id() const;
  public:
  void clear_from_user_id();
  uint32_t from_user_id() const;
  void set_from_user_id(uint32_t value);
  private:
  uint32_t _internal_from_user_id() const;
  void _internal_set_from_user_id(uint32_t value);
  public:

  // required uint32 to_user_id = 2;
  bool has_to_user_id() const;
  private:
  bool _internal_has_to_user_id() const;
  public:
  void clear_to_user_id();
  uint32_t to_user_id() const;
  void set_to_user_id(uint32_t value);
  private:
  uint32_t _internal_to_user_id() const;
  void _internal_set_to_user_id(uint32_t value);
  public:

  // required uint32 file_size = 4;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // required .Bohan.BaseDefine.FileType trans_mode = 7;
  bool has_trans_mode() const;
  private:
  bool _internal_has_trans_mode() const;
  public:
  void clear_trans_mode();
  ::Bohan::BaseDefine::FileType trans_mode() const;
  void set_trans_mode(::Bohan::BaseDefine::FileType value);
  private:
  ::Bohan::BaseDefine::FileType _internal_trans_mode() const;
  void _internal_set_trans_mode(::Bohan::BaseDefine::FileType value);
  public:

  // required uint32 offline_ready = 8;
  bool has_offline_ready() const;
  private:
  bool _internal_has_offline_ready() const;
  public:
  void clear_offline_ready();
  uint32_t offline_ready() const;
  void set_offline_ready(uint32_t value);
  private:
  uint32_t _internal_offline_ready() const;
  void _internal_set_offline_ready(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileNotify)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr > ip_addr_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    uint32_t from_user_id_;
    uint32_t to_user_id_;
    uint32_t file_size_;
    int trans_mode_;
    uint32_t offline_ready_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FileHasOfflineReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileHasOfflineReq) */ {
 public:
  inline FileHasOfflineReq() : FileHasOfflineReq(nullptr) {}
  ~FileHasOfflineReq() override;
  explicit PROTOBUF_CONSTEXPR FileHasOfflineReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileHasOfflineReq(const FileHasOfflineReq& from);
  FileHasOfflineReq(FileHasOfflineReq&& from) noexcept
    : FileHasOfflineReq() {
    *this = ::std::move(from);
  }

  inline FileHasOfflineReq& operator=(const FileHasOfflineReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileHasOfflineReq& operator=(FileHasOfflineReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileHasOfflineReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileHasOfflineReq* internal_default_instance() {
    return reinterpret_cast<const FileHasOfflineReq*>(
               &_FileHasOfflineReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FileHasOfflineReq& a, FileHasOfflineReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileHasOfflineReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileHasOfflineReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileHasOfflineReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileHasOfflineReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileHasOfflineReq& from);
  void MergeFrom(const FileHasOfflineReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileHasOfflineReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileHasOfflineReq";
  }
  protected:
  explicit FileHasOfflineReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileHasOfflineReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FileHasOfflineRsp final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileHasOfflineRsp) */ {
 public:
  inline FileHasOfflineRsp() : FileHasOfflineRsp(nullptr) {}
  ~FileHasOfflineRsp() override;
  explicit PROTOBUF_CONSTEXPR FileHasOfflineRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileHasOfflineRsp(const FileHasOfflineRsp& from);
  FileHasOfflineRsp(FileHasOfflineRsp&& from) noexcept
    : FileHasOfflineRsp() {
    *this = ::std::move(from);
  }

  inline FileHasOfflineRsp& operator=(const FileHasOfflineRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileHasOfflineRsp& operator=(FileHasOfflineRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileHasOfflineRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileHasOfflineRsp* internal_default_instance() {
    return reinterpret_cast<const FileHasOfflineRsp*>(
               &_FileHasOfflineRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FileHasOfflineRsp& a, FileHasOfflineRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(FileHasOfflineRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileHasOfflineRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileHasOfflineRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileHasOfflineRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileHasOfflineRsp& from);
  void MergeFrom(const FileHasOfflineRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileHasOfflineRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileHasOfflineRsp";
  }
  protected:
  explicit FileHasOfflineRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineFileListFieldNumber = 2,
    kIpAddrListFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kUserIdFieldNumber = 1,
  };
  // repeated .Bohan.BaseDefine.OfflineFileInfo offline_file_list = 2;
  int offline_file_list_size() const;
  private:
  int _internal_offline_file_list_size() const;
  public:
  void clear_offline_file_list();
  ::Bohan::BaseDefine::OfflineFileInfo* mutable_offline_file_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::OfflineFileInfo >*
      mutable_offline_file_list();
  private:
  const ::Bohan::BaseDefine::OfflineFileInfo& _internal_offline_file_list(int index) const;
  ::Bohan::BaseDefine::OfflineFileInfo* _internal_add_offline_file_list();
  public:
  const ::Bohan::BaseDefine::OfflineFileInfo& offline_file_list(int index) const;
  ::Bohan::BaseDefine::OfflineFileInfo* add_offline_file_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::OfflineFileInfo >&
      offline_file_list() const;

  // repeated .Bohan.BaseDefine.IpAddr ip_addr_list = 3;
  int ip_addr_list_size() const;
  private:
  int _internal_ip_addr_list_size() const;
  public:
  void clear_ip_addr_list();
  ::Bohan::BaseDefine::IpAddr* mutable_ip_addr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >*
      mutable_ip_addr_list();
  private:
  const ::Bohan::BaseDefine::IpAddr& _internal_ip_addr_list(int index) const;
  ::Bohan::BaseDefine::IpAddr* _internal_add_ip_addr_list();
  public:
  const ::Bohan::BaseDefine::IpAddr& ip_addr_list(int index) const;
  ::Bohan::BaseDefine::IpAddr* add_ip_addr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >&
      ip_addr_list() const;

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  private:
  bool _internal_has_attach_data() const;
  public:
  void clear_attach_data();
  const std::string& attach_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attach_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attach_data();
  PROTOBUF_NODISCARD std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // required uint32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileHasOfflineRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::OfflineFileInfo > offline_file_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr > ip_addr_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
    uint32_t user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FileAddOfflineReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileAddOfflineReq) */ {
 public:
  inline FileAddOfflineReq() : FileAddOfflineReq(nullptr) {}
  ~FileAddOfflineReq() override;
  explicit PROTOBUF_CONSTEXPR FileAddOfflineReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileAddOfflineReq(const FileAddOfflineReq& from);
  FileAddOfflineReq(FileAddOfflineReq&& from) noexcept
    : FileAddOfflineReq() {
    *this = ::std::move(from);
  }

  inline FileAddOfflineReq& operator=(const FileAddOfflineReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileAddOfflineReq& operator=(FileAddOfflineReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileAddOfflineReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileAddOfflineReq* internal_default_instance() {
    return reinterpret_cast<const FileAddOfflineReq*>(
               &_FileAddOfflineReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FileAddOfflineReq& a, FileAddOfflineReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileAddOfflineReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileAddOfflineReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileAddOfflineReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileAddOfflineReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileAddOfflineReq& from);
  void MergeFrom(const FileAddOfflineReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileAddOfflineReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileAddOfflineReq";
  }
  protected:
  explicit FileAddOfflineReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 3,
    kFileNameFieldNumber = 4,
    kFromUserIdFieldNumber = 1,
    kToUserIdFieldNumber = 2,
    kFileSizeFieldNumber = 5,
  };
  // required string task_id = 3;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required string file_name = 4;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // required uint32 from_user_id = 1;
  bool has_from_user_id() const;
  private:
  bool _internal_has_from_user_id() const;
  public:
  void clear_from_user_id();
  uint32_t from_user_id() const;
  void set_from_user_id(uint32_t value);
  private:
  uint32_t _internal_from_user_id() const;
  void _internal_set_from_user_id(uint32_t value);
  public:

  // required uint32 to_user_id = 2;
  bool has_to_user_id() const;
  private:
  bool _internal_has_to_user_id() const;
  public:
  void clear_to_user_id();
  uint32_t to_user_id() const;
  void set_to_user_id(uint32_t value);
  private:
  uint32_t _internal_to_user_id() const;
  void _internal_set_to_user_id(uint32_t value);
  public:

  // required uint32 file_size = 5;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint32_t file_size() const;
  void set_file_size(uint32_t value);
  private:
  uint32_t _internal_file_size() const;
  void _internal_set_file_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileAddOfflineReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    uint32_t from_user_id_;
    uint32_t to_user_id_;
    uint32_t file_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// -------------------------------------------------------------------

class FileDelOfflineReq final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Bohan.File.FileDelOfflineReq) */ {
 public:
  inline FileDelOfflineReq() : FileDelOfflineReq(nullptr) {}
  ~FileDelOfflineReq() override;
  explicit PROTOBUF_CONSTEXPR FileDelOfflineReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDelOfflineReq(const FileDelOfflineReq& from);
  FileDelOfflineReq(FileDelOfflineReq&& from) noexcept
    : FileDelOfflineReq() {
    *this = ::std::move(from);
  }

  inline FileDelOfflineReq& operator=(const FileDelOfflineReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDelOfflineReq& operator=(FileDelOfflineReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileDelOfflineReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDelOfflineReq* internal_default_instance() {
    return reinterpret_cast<const FileDelOfflineReq*>(
               &_FileDelOfflineReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FileDelOfflineReq& a, FileDelOfflineReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDelOfflineReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDelOfflineReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDelOfflineReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDelOfflineReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileDelOfflineReq& from);
  void MergeFrom(const FileDelOfflineReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileDelOfflineReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bohan.File.FileDelOfflineReq";
  }
  protected:
  explicit FileDelOfflineReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 3,
    kFromUserIdFieldNumber = 1,
    kToUserIdFieldNumber = 2,
  };
  // required string task_id = 3;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required uint32 from_user_id = 1;
  bool has_from_user_id() const;
  private:
  bool _internal_has_from_user_id() const;
  public:
  void clear_from_user_id();
  uint32_t from_user_id() const;
  void set_from_user_id(uint32_t value);
  private:
  uint32_t _internal_from_user_id() const;
  void _internal_set_from_user_id(uint32_t value);
  public:

  // required uint32 to_user_id = 2;
  bool has_to_user_id() const;
  private:
  bool _internal_has_to_user_id() const;
  public:
  void clear_to_user_id();
  uint32_t to_user_id() const;
  void set_to_user_id(uint32_t value);
  private:
  uint32_t _internal_to_user_id() const;
  void _internal_set_to_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Bohan.File.FileDelOfflineReq)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
    uint32_t from_user_id_;
    uint32_t to_user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_File_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileLoginReq

// required uint32 user_id = 1;
inline bool FileLoginReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileLoginReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FileLoginReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FileLoginReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t FileLoginReq::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileLoginReq.user_id)
  return _internal_user_id();
}
inline void FileLoginReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void FileLoginReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileLoginReq.user_id)
}

// required string task_id = 2;
inline bool FileLoginReq::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileLoginReq::has_task_id() const {
  return _internal_has_task_id();
}
inline void FileLoginReq::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileLoginReq::task_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileLoginReq.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileLoginReq::set_task_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileLoginReq.task_id)
}
inline std::string* FileLoginReq::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileLoginReq.task_id)
  return _s;
}
inline const std::string& FileLoginReq::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void FileLoginReq::_internal_set_task_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileLoginReq::_internal_mutable_task_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileLoginReq::release_task_id() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileLoginReq.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileLoginReq::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileLoginReq.task_id)
}

// required .Bohan.BaseDefine.ClientFileRole file_role = 3;
inline bool FileLoginReq::_internal_has_file_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileLoginReq::has_file_role() const {
  return _internal_has_file_role();
}
inline void FileLoginReq::clear_file_role() {
  _impl_.file_role_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Bohan::BaseDefine::ClientFileRole FileLoginReq::_internal_file_role() const {
  return static_cast< ::Bohan::BaseDefine::ClientFileRole >(_impl_.file_role_);
}
inline ::Bohan::BaseDefine::ClientFileRole FileLoginReq::file_role() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileLoginReq.file_role)
  return _internal_file_role();
}
inline void FileLoginReq::_internal_set_file_role(::Bohan::BaseDefine::ClientFileRole value) {
  assert(::Bohan::BaseDefine::ClientFileRole_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.file_role_ = value;
}
inline void FileLoginReq::set_file_role(::Bohan::BaseDefine::ClientFileRole value) {
  _internal_set_file_role(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileLoginReq.file_role)
}

// -------------------------------------------------------------------

// FileLoginRsp

// required uint32 result_code = 1;
inline bool FileLoginRsp::_internal_has_result_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileLoginRsp::has_result_code() const {
  return _internal_has_result_code();
}
inline void FileLoginRsp::clear_result_code() {
  _impl_.result_code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FileLoginRsp::_internal_result_code() const {
  return _impl_.result_code_;
}
inline uint32_t FileLoginRsp::result_code() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileLoginRsp.result_code)
  return _internal_result_code();
}
inline void FileLoginRsp::_internal_set_result_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.result_code_ = value;
}
inline void FileLoginRsp::set_result_code(uint32_t value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileLoginRsp.result_code)
}

// required string task_id = 2;
inline bool FileLoginRsp::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileLoginRsp::has_task_id() const {
  return _internal_has_task_id();
}
inline void FileLoginRsp::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileLoginRsp::task_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileLoginRsp.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileLoginRsp::set_task_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileLoginRsp.task_id)
}
inline std::string* FileLoginRsp::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileLoginRsp.task_id)
  return _s;
}
inline const std::string& FileLoginRsp::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void FileLoginRsp::_internal_set_task_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileLoginRsp::_internal_mutable_task_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileLoginRsp::release_task_id() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileLoginRsp.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileLoginRsp::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileLoginRsp.task_id)
}

// -------------------------------------------------------------------

// FileState

// required .Bohan.BaseDefine.ClientFileState state = 1;
inline bool FileState::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileState::has_state() const {
  return _internal_has_state();
}
inline void FileState::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Bohan::BaseDefine::ClientFileState FileState::_internal_state() const {
  return static_cast< ::Bohan::BaseDefine::ClientFileState >(_impl_.state_);
}
inline ::Bohan::BaseDefine::ClientFileState FileState::state() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileState.state)
  return _internal_state();
}
inline void FileState::_internal_set_state(::Bohan::BaseDefine::ClientFileState value) {
  assert(::Bohan::BaseDefine::ClientFileState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}
inline void FileState::set_state(::Bohan::BaseDefine::ClientFileState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileState.state)
}

// required string task_id = 2;
inline bool FileState::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileState::has_task_id() const {
  return _internal_has_task_id();
}
inline void FileState::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileState::task_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileState.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileState::set_task_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileState.task_id)
}
inline std::string* FileState::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileState.task_id)
  return _s;
}
inline const std::string& FileState::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void FileState::_internal_set_task_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileState::_internal_mutable_task_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileState::release_task_id() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileState.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileState::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileState.task_id)
}

// required uint32 user_id = 3;
inline bool FileState::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileState::has_user_id() const {
  return _internal_has_user_id();
}
inline void FileState::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FileState::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t FileState::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileState.user_id)
  return _internal_user_id();
}
inline void FileState::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_id_ = value;
}
inline void FileState::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileState.user_id)
}

// -------------------------------------------------------------------

// FilePullDataReq

// required string task_id = 1;
inline bool FilePullDataReq::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilePullDataReq::has_task_id() const {
  return _internal_has_task_id();
}
inline void FilePullDataReq::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FilePullDataReq::task_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataReq.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilePullDataReq::set_task_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataReq.task_id)
}
inline std::string* FilePullDataReq::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FilePullDataReq.task_id)
  return _s;
}
inline const std::string& FilePullDataReq::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void FilePullDataReq::_internal_set_task_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FilePullDataReq::_internal_mutable_task_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FilePullDataReq::release_task_id() {
  // @@protoc_insertion_point(field_release:Bohan.File.FilePullDataReq.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FilePullDataReq::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FilePullDataReq.task_id)
}

// required uint32 user_id = 2;
inline bool FilePullDataReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FilePullDataReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FilePullDataReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FilePullDataReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t FilePullDataReq::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataReq.user_id)
  return _internal_user_id();
}
inline void FilePullDataReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void FilePullDataReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataReq.user_id)
}

// required .Bohan.BaseDefine.FileType trans_mode = 3;
inline bool FilePullDataReq::_internal_has_trans_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FilePullDataReq::has_trans_mode() const {
  return _internal_has_trans_mode();
}
inline void FilePullDataReq::clear_trans_mode() {
  _impl_.trans_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Bohan::BaseDefine::FileType FilePullDataReq::_internal_trans_mode() const {
  return static_cast< ::Bohan::BaseDefine::FileType >(_impl_.trans_mode_);
}
inline ::Bohan::BaseDefine::FileType FilePullDataReq::trans_mode() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataReq.trans_mode)
  return _internal_trans_mode();
}
inline void FilePullDataReq::_internal_set_trans_mode(::Bohan::BaseDefine::FileType value) {
  assert(::Bohan::BaseDefine::FileType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.trans_mode_ = value;
}
inline void FilePullDataReq::set_trans_mode(::Bohan::BaseDefine::FileType value) {
  _internal_set_trans_mode(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataReq.trans_mode)
}

// required uint32 offset = 4;
inline bool FilePullDataReq::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FilePullDataReq::has_offset() const {
  return _internal_has_offset();
}
inline void FilePullDataReq::clear_offset() {
  _impl_.offset_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FilePullDataReq::_internal_offset() const {
  return _impl_.offset_;
}
inline uint32_t FilePullDataReq::offset() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataReq.offset)
  return _internal_offset();
}
inline void FilePullDataReq::_internal_set_offset(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.offset_ = value;
}
inline void FilePullDataReq::set_offset(uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataReq.offset)
}

// required uint32 data_size = 5;
inline bool FilePullDataReq::_internal_has_data_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FilePullDataReq::has_data_size() const {
  return _internal_has_data_size();
}
inline void FilePullDataReq::clear_data_size() {
  _impl_.data_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FilePullDataReq::_internal_data_size() const {
  return _impl_.data_size_;
}
inline uint32_t FilePullDataReq::data_size() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataReq.data_size)
  return _internal_data_size();
}
inline void FilePullDataReq::_internal_set_data_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.data_size_ = value;
}
inline void FilePullDataReq::set_data_size(uint32_t value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataReq.data_size)
}

// -------------------------------------------------------------------

// FilePullDataRsp

// required uint32 result_code = 1;
inline bool FilePullDataRsp::_internal_has_result_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FilePullDataRsp::has_result_code() const {
  return _internal_has_result_code();
}
inline void FilePullDataRsp::clear_result_code() {
  _impl_.result_code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FilePullDataRsp::_internal_result_code() const {
  return _impl_.result_code_;
}
inline uint32_t FilePullDataRsp::result_code() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataRsp.result_code)
  return _internal_result_code();
}
inline void FilePullDataRsp::_internal_set_result_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.result_code_ = value;
}
inline void FilePullDataRsp::set_result_code(uint32_t value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataRsp.result_code)
}

// required string task_id = 2;
inline bool FilePullDataRsp::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilePullDataRsp::has_task_id() const {
  return _internal_has_task_id();
}
inline void FilePullDataRsp::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FilePullDataRsp::task_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataRsp.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilePullDataRsp::set_task_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataRsp.task_id)
}
inline std::string* FilePullDataRsp::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FilePullDataRsp.task_id)
  return _s;
}
inline const std::string& FilePullDataRsp::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void FilePullDataRsp::_internal_set_task_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FilePullDataRsp::_internal_mutable_task_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FilePullDataRsp::release_task_id() {
  // @@protoc_insertion_point(field_release:Bohan.File.FilePullDataRsp.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FilePullDataRsp::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FilePullDataRsp.task_id)
}

// required uint32 user_id = 3;
inline bool FilePullDataRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FilePullDataRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void FilePullDataRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FilePullDataRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t FilePullDataRsp::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataRsp.user_id)
  return _internal_user_id();
}
inline void FilePullDataRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.user_id_ = value;
}
inline void FilePullDataRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataRsp.user_id)
}

// required uint32 offset = 4;
inline bool FilePullDataRsp::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FilePullDataRsp::has_offset() const {
  return _internal_has_offset();
}
inline void FilePullDataRsp::clear_offset() {
  _impl_.offset_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FilePullDataRsp::_internal_offset() const {
  return _impl_.offset_;
}
inline uint32_t FilePullDataRsp::offset() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataRsp.offset)
  return _internal_offset();
}
inline void FilePullDataRsp::_internal_set_offset(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.offset_ = value;
}
inline void FilePullDataRsp::set_offset(uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataRsp.offset)
}

// required bytes data = 5;
inline bool FilePullDataRsp::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FilePullDataRsp::has_data() const {
  return _internal_has_data();
}
inline void FilePullDataRsp::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FilePullDataRsp::data() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FilePullDataRsp.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilePullDataRsp::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FilePullDataRsp.data)
}
inline std::string* FilePullDataRsp::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FilePullDataRsp.data)
  return _s;
}
inline const std::string& FilePullDataRsp::_internal_data() const {
  return _impl_.data_.Get();
}
inline void FilePullDataRsp::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* FilePullDataRsp::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* FilePullDataRsp::release_data() {
  // @@protoc_insertion_point(field_release:Bohan.File.FilePullDataRsp.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FilePullDataRsp::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FilePullDataRsp.data)
}

// -------------------------------------------------------------------

// FileReq

// required uint32 from_user_id = 1;
inline bool FileReq::_internal_has_from_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileReq::has_from_user_id() const {
  return _internal_has_from_user_id();
}
inline void FileReq::clear_from_user_id() {
  _impl_.from_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FileReq::_internal_from_user_id() const {
  return _impl_.from_user_id_;
}
inline uint32_t FileReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileReq.from_user_id)
  return _internal_from_user_id();
}
inline void FileReq::_internal_set_from_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.from_user_id_ = value;
}
inline void FileReq::set_from_user_id(uint32_t value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileReq.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool FileReq::_internal_has_to_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileReq::has_to_user_id() const {
  return _internal_has_to_user_id();
}
inline void FileReq::clear_to_user_id() {
  _impl_.to_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FileReq::_internal_to_user_id() const {
  return _impl_.to_user_id_;
}
inline uint32_t FileReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileReq.to_user_id)
  return _internal_to_user_id();
}
inline void FileReq::_internal_set_to_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.to_user_id_ = value;
}
inline void FileReq::set_to_user_id(uint32_t value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileReq.to_user_id)
}

// required string file_name = 3;
inline bool FileReq::_internal_has_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileReq::has_file_name() const {
  return _internal_has_file_name();
}
inline void FileReq::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileReq::file_name() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileReq.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileReq::set_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileReq.file_name)
}
inline std::string* FileReq::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileReq.file_name)
  return _s;
}
inline const std::string& FileReq::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileReq::_internal_set_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileReq::_internal_mutable_file_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileReq::release_file_name() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileReq.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileReq::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileReq.file_name)
}

// required uint32 file_size = 4;
inline bool FileReq::_internal_has_file_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileReq::has_file_size() const {
  return _internal_has_file_size();
}
inline void FileReq::clear_file_size() {
  _impl_.file_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FileReq::_internal_file_size() const {
  return _impl_.file_size_;
}
inline uint32_t FileReq::file_size() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileReq.file_size)
  return _internal_file_size();
}
inline void FileReq::_internal_set_file_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.file_size_ = value;
}
inline void FileReq::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileReq.file_size)
}

// required .Bohan.BaseDefine.FileType trans_mode = 5;
inline bool FileReq::_internal_has_trans_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileReq::has_trans_mode() const {
  return _internal_has_trans_mode();
}
inline void FileReq::clear_trans_mode() {
  _impl_.trans_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::Bohan::BaseDefine::FileType FileReq::_internal_trans_mode() const {
  return static_cast< ::Bohan::BaseDefine::FileType >(_impl_.trans_mode_);
}
inline ::Bohan::BaseDefine::FileType FileReq::trans_mode() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileReq.trans_mode)
  return _internal_trans_mode();
}
inline void FileReq::_internal_set_trans_mode(::Bohan::BaseDefine::FileType value) {
  assert(::Bohan::BaseDefine::FileType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.trans_mode_ = value;
}
inline void FileReq::set_trans_mode(::Bohan::BaseDefine::FileType value) {
  _internal_set_trans_mode(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileReq.trans_mode)
}

// -------------------------------------------------------------------

// FileRsp

// required uint32 result_code = 1;
inline bool FileRsp::_internal_has_result_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileRsp::has_result_code() const {
  return _internal_has_result_code();
}
inline void FileRsp::clear_result_code() {
  _impl_.result_code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FileRsp::_internal_result_code() const {
  return _impl_.result_code_;
}
inline uint32_t FileRsp::result_code() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileRsp.result_code)
  return _internal_result_code();
}
inline void FileRsp::_internal_set_result_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.result_code_ = value;
}
inline void FileRsp::set_result_code(uint32_t value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileRsp.result_code)
}

// required uint32 from_user_id = 2;
inline bool FileRsp::_internal_has_from_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileRsp::has_from_user_id() const {
  return _internal_has_from_user_id();
}
inline void FileRsp::clear_from_user_id() {
  _impl_.from_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FileRsp::_internal_from_user_id() const {
  return _impl_.from_user_id_;
}
inline uint32_t FileRsp::from_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileRsp.from_user_id)
  return _internal_from_user_id();
}
inline void FileRsp::_internal_set_from_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.from_user_id_ = value;
}
inline void FileRsp::set_from_user_id(uint32_t value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileRsp.from_user_id)
}

// required uint32 to_user_id = 3;
inline bool FileRsp::_internal_has_to_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileRsp::has_to_user_id() const {
  return _internal_has_to_user_id();
}
inline void FileRsp::clear_to_user_id() {
  _impl_.to_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FileRsp::_internal_to_user_id() const {
  return _impl_.to_user_id_;
}
inline uint32_t FileRsp::to_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileRsp.to_user_id)
  return _internal_to_user_id();
}
inline void FileRsp::_internal_set_to_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.to_user_id_ = value;
}
inline void FileRsp::set_to_user_id(uint32_t value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileRsp.to_user_id)
}

// required string file_name = 4;
inline bool FileRsp::_internal_has_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileRsp::has_file_name() const {
  return _internal_has_file_name();
}
inline void FileRsp::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileRsp::file_name() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileRsp.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileRsp::set_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileRsp.file_name)
}
inline std::string* FileRsp::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileRsp.file_name)
  return _s;
}
inline const std::string& FileRsp::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileRsp::_internal_set_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileRsp::_internal_mutable_file_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileRsp::release_file_name() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileRsp.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileRsp::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileRsp.file_name)
}

// required string task_id = 5;
inline bool FileRsp::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileRsp::has_task_id() const {
  return _internal_has_task_id();
}
inline void FileRsp::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileRsp::task_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileRsp.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileRsp::set_task_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileRsp.task_id)
}
inline std::string* FileRsp::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileRsp.task_id)
  return _s;
}
inline const std::string& FileRsp::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void FileRsp::_internal_set_task_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileRsp::_internal_mutable_task_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileRsp::release_task_id() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileRsp.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.task_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileRsp::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileRsp.task_id)
}

// repeated .Bohan.BaseDefine.IpAddr ip_addr_list = 6;
inline int FileRsp::_internal_ip_addr_list_size() const {
  return _impl_.ip_addr_list_.size();
}
inline int FileRsp::ip_addr_list_size() const {
  return _internal_ip_addr_list_size();
}
inline ::Bohan::BaseDefine::IpAddr* FileRsp::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileRsp.ip_addr_list)
  return _impl_.ip_addr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >*
FileRsp::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.File.FileRsp.ip_addr_list)
  return &_impl_.ip_addr_list_;
}
inline const ::Bohan::BaseDefine::IpAddr& FileRsp::_internal_ip_addr_list(int index) const {
  return _impl_.ip_addr_list_.Get(index);
}
inline const ::Bohan::BaseDefine::IpAddr& FileRsp::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileRsp.ip_addr_list)
  return _internal_ip_addr_list(index);
}
inline ::Bohan::BaseDefine::IpAddr* FileRsp::_internal_add_ip_addr_list() {
  return _impl_.ip_addr_list_.Add();
}
inline ::Bohan::BaseDefine::IpAddr* FileRsp::add_ip_addr_list() {
  ::Bohan::BaseDefine::IpAddr* _add = _internal_add_ip_addr_list();
  // @@protoc_insertion_point(field_add:Bohan.File.FileRsp.ip_addr_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >&
FileRsp::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:Bohan.File.FileRsp.ip_addr_list)
  return _impl_.ip_addr_list_;
}

// required .Bohan.BaseDefine.FileType trans_mode = 7;
inline bool FileRsp::_internal_has_trans_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FileRsp::has_trans_mode() const {
  return _internal_has_trans_mode();
}
inline void FileRsp::clear_trans_mode() {
  _impl_.trans_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::Bohan::BaseDefine::FileType FileRsp::_internal_trans_mode() const {
  return static_cast< ::Bohan::BaseDefine::FileType >(_impl_.trans_mode_);
}
inline ::Bohan::BaseDefine::FileType FileRsp::trans_mode() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileRsp.trans_mode)
  return _internal_trans_mode();
}
inline void FileRsp::_internal_set_trans_mode(::Bohan::BaseDefine::FileType value) {
  assert(::Bohan::BaseDefine::FileType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.trans_mode_ = value;
}
inline void FileRsp::set_trans_mode(::Bohan::BaseDefine::FileType value) {
  _internal_set_trans_mode(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileRsp.trans_mode)
}

// -------------------------------------------------------------------

// FileNotify

// required uint32 from_user_id = 1;
inline bool FileNotify::_internal_has_from_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileNotify::has_from_user_id() const {
  return _internal_has_from_user_id();
}
inline void FileNotify::clear_from_user_id() {
  _impl_.from_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FileNotify::_internal_from_user_id() const {
  return _impl_.from_user_id_;
}
inline uint32_t FileNotify::from_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileNotify.from_user_id)
  return _internal_from_user_id();
}
inline void FileNotify::_internal_set_from_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.from_user_id_ = value;
}
inline void FileNotify::set_from_user_id(uint32_t value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileNotify.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool FileNotify::_internal_has_to_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileNotify::has_to_user_id() const {
  return _internal_has_to_user_id();
}
inline void FileNotify::clear_to_user_id() {
  _impl_.to_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FileNotify::_internal_to_user_id() const {
  return _impl_.to_user_id_;
}
inline uint32_t FileNotify::to_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileNotify.to_user_id)
  return _internal_to_user_id();
}
inline void FileNotify::_internal_set_to_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.to_user_id_ = value;
}
inline void FileNotify::set_to_user_id(uint32_t value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileNotify.to_user_id)
}

// required string file_name = 3;
inline bool FileNotify::_internal_has_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileNotify::has_file_name() const {
  return _internal_has_file_name();
}
inline void FileNotify::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileNotify::file_name() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileNotify.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileNotify::set_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileNotify.file_name)
}
inline std::string* FileNotify::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileNotify.file_name)
  return _s;
}
inline const std::string& FileNotify::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileNotify::_internal_set_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileNotify::_internal_mutable_file_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileNotify::release_file_name() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileNotify.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileNotify::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileNotify.file_name)
}

// required uint32 file_size = 4;
inline bool FileNotify::_internal_has_file_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileNotify::has_file_size() const {
  return _internal_has_file_size();
}
inline void FileNotify::clear_file_size() {
  _impl_.file_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FileNotify::_internal_file_size() const {
  return _impl_.file_size_;
}
inline uint32_t FileNotify::file_size() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileNotify.file_size)
  return _internal_file_size();
}
inline void FileNotify::_internal_set_file_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.file_size_ = value;
}
inline void FileNotify::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileNotify.file_size)
}

// required string task_id = 5;
inline bool FileNotify::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileNotify::has_task_id() const {
  return _internal_has_task_id();
}
inline void FileNotify::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileNotify::task_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileNotify.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileNotify::set_task_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileNotify.task_id)
}
inline std::string* FileNotify::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileNotify.task_id)
  return _s;
}
inline const std::string& FileNotify::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void FileNotify::_internal_set_task_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileNotify::_internal_mutable_task_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileNotify::release_task_id() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileNotify.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.task_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileNotify::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileNotify.task_id)
}

// repeated .Bohan.BaseDefine.IpAddr ip_addr_list = 6;
inline int FileNotify::_internal_ip_addr_list_size() const {
  return _impl_.ip_addr_list_.size();
}
inline int FileNotify::ip_addr_list_size() const {
  return _internal_ip_addr_list_size();
}
inline ::Bohan::BaseDefine::IpAddr* FileNotify::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileNotify.ip_addr_list)
  return _impl_.ip_addr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >*
FileNotify::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.File.FileNotify.ip_addr_list)
  return &_impl_.ip_addr_list_;
}
inline const ::Bohan::BaseDefine::IpAddr& FileNotify::_internal_ip_addr_list(int index) const {
  return _impl_.ip_addr_list_.Get(index);
}
inline const ::Bohan::BaseDefine::IpAddr& FileNotify::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileNotify.ip_addr_list)
  return _internal_ip_addr_list(index);
}
inline ::Bohan::BaseDefine::IpAddr* FileNotify::_internal_add_ip_addr_list() {
  return _impl_.ip_addr_list_.Add();
}
inline ::Bohan::BaseDefine::IpAddr* FileNotify::add_ip_addr_list() {
  ::Bohan::BaseDefine::IpAddr* _add = _internal_add_ip_addr_list();
  // @@protoc_insertion_point(field_add:Bohan.File.FileNotify.ip_addr_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >&
FileNotify::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:Bohan.File.FileNotify.ip_addr_list)
  return _impl_.ip_addr_list_;
}

// required .Bohan.BaseDefine.FileType trans_mode = 7;
inline bool FileNotify::_internal_has_trans_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FileNotify::has_trans_mode() const {
  return _internal_has_trans_mode();
}
inline void FileNotify::clear_trans_mode() {
  _impl_.trans_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::Bohan::BaseDefine::FileType FileNotify::_internal_trans_mode() const {
  return static_cast< ::Bohan::BaseDefine::FileType >(_impl_.trans_mode_);
}
inline ::Bohan::BaseDefine::FileType FileNotify::trans_mode() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileNotify.trans_mode)
  return _internal_trans_mode();
}
inline void FileNotify::_internal_set_trans_mode(::Bohan::BaseDefine::FileType value) {
  assert(::Bohan::BaseDefine::FileType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.trans_mode_ = value;
}
inline void FileNotify::set_trans_mode(::Bohan::BaseDefine::FileType value) {
  _internal_set_trans_mode(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileNotify.trans_mode)
}

// required uint32 offline_ready = 8;
inline bool FileNotify::_internal_has_offline_ready() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FileNotify::has_offline_ready() const {
  return _internal_has_offline_ready();
}
inline void FileNotify::clear_offline_ready() {
  _impl_.offline_ready_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t FileNotify::_internal_offline_ready() const {
  return _impl_.offline_ready_;
}
inline uint32_t FileNotify::offline_ready() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileNotify.offline_ready)
  return _internal_offline_ready();
}
inline void FileNotify::_internal_set_offline_ready(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.offline_ready_ = value;
}
inline void FileNotify::set_offline_ready(uint32_t value) {
  _internal_set_offline_ready(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileNotify.offline_ready)
}

// -------------------------------------------------------------------

// FileHasOfflineReq

// required uint32 user_id = 1;
inline bool FileHasOfflineReq::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileHasOfflineReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void FileHasOfflineReq::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FileHasOfflineReq::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t FileHasOfflineReq::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileHasOfflineReq.user_id)
  return _internal_user_id();
}
inline void FileHasOfflineReq::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void FileHasOfflineReq::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileHasOfflineReq.user_id)
}

// optional bytes attach_data = 20;
inline bool FileHasOfflineReq::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileHasOfflineReq::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void FileHasOfflineReq::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileHasOfflineReq::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileHasOfflineReq.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileHasOfflineReq::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileHasOfflineReq.attach_data)
}
inline std::string* FileHasOfflineReq::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileHasOfflineReq.attach_data)
  return _s;
}
inline const std::string& FileHasOfflineReq::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void FileHasOfflineReq::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileHasOfflineReq::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileHasOfflineReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileHasOfflineReq.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileHasOfflineReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileHasOfflineReq.attach_data)
}

// -------------------------------------------------------------------

// FileHasOfflineRsp

// required uint32 user_id = 1;
inline bool FileHasOfflineRsp::_internal_has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileHasOfflineRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void FileHasOfflineRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FileHasOfflineRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t FileHasOfflineRsp::user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileHasOfflineRsp.user_id)
  return _internal_user_id();
}
inline void FileHasOfflineRsp::_internal_set_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_id_ = value;
}
inline void FileHasOfflineRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileHasOfflineRsp.user_id)
}

// repeated .Bohan.BaseDefine.OfflineFileInfo offline_file_list = 2;
inline int FileHasOfflineRsp::_internal_offline_file_list_size() const {
  return _impl_.offline_file_list_.size();
}
inline int FileHasOfflineRsp::offline_file_list_size() const {
  return _internal_offline_file_list_size();
}
inline ::Bohan::BaseDefine::OfflineFileInfo* FileHasOfflineRsp::mutable_offline_file_list(int index) {
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileHasOfflineRsp.offline_file_list)
  return _impl_.offline_file_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::OfflineFileInfo >*
FileHasOfflineRsp::mutable_offline_file_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.File.FileHasOfflineRsp.offline_file_list)
  return &_impl_.offline_file_list_;
}
inline const ::Bohan::BaseDefine::OfflineFileInfo& FileHasOfflineRsp::_internal_offline_file_list(int index) const {
  return _impl_.offline_file_list_.Get(index);
}
inline const ::Bohan::BaseDefine::OfflineFileInfo& FileHasOfflineRsp::offline_file_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileHasOfflineRsp.offline_file_list)
  return _internal_offline_file_list(index);
}
inline ::Bohan::BaseDefine::OfflineFileInfo* FileHasOfflineRsp::_internal_add_offline_file_list() {
  return _impl_.offline_file_list_.Add();
}
inline ::Bohan::BaseDefine::OfflineFileInfo* FileHasOfflineRsp::add_offline_file_list() {
  ::Bohan::BaseDefine::OfflineFileInfo* _add = _internal_add_offline_file_list();
  // @@protoc_insertion_point(field_add:Bohan.File.FileHasOfflineRsp.offline_file_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::OfflineFileInfo >&
FileHasOfflineRsp::offline_file_list() const {
  // @@protoc_insertion_point(field_list:Bohan.File.FileHasOfflineRsp.offline_file_list)
  return _impl_.offline_file_list_;
}

// repeated .Bohan.BaseDefine.IpAddr ip_addr_list = 3;
inline int FileHasOfflineRsp::_internal_ip_addr_list_size() const {
  return _impl_.ip_addr_list_.size();
}
inline int FileHasOfflineRsp::ip_addr_list_size() const {
  return _internal_ip_addr_list_size();
}
inline ::Bohan::BaseDefine::IpAddr* FileHasOfflineRsp::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileHasOfflineRsp.ip_addr_list)
  return _impl_.ip_addr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >*
FileHasOfflineRsp::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:Bohan.File.FileHasOfflineRsp.ip_addr_list)
  return &_impl_.ip_addr_list_;
}
inline const ::Bohan::BaseDefine::IpAddr& FileHasOfflineRsp::_internal_ip_addr_list(int index) const {
  return _impl_.ip_addr_list_.Get(index);
}
inline const ::Bohan::BaseDefine::IpAddr& FileHasOfflineRsp::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileHasOfflineRsp.ip_addr_list)
  return _internal_ip_addr_list(index);
}
inline ::Bohan::BaseDefine::IpAddr* FileHasOfflineRsp::_internal_add_ip_addr_list() {
  return _impl_.ip_addr_list_.Add();
}
inline ::Bohan::BaseDefine::IpAddr* FileHasOfflineRsp::add_ip_addr_list() {
  ::Bohan::BaseDefine::IpAddr* _add = _internal_add_ip_addr_list();
  // @@protoc_insertion_point(field_add:Bohan.File.FileHasOfflineRsp.ip_addr_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bohan::BaseDefine::IpAddr >&
FileHasOfflineRsp::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:Bohan.File.FileHasOfflineRsp.ip_addr_list)
  return _impl_.ip_addr_list_;
}

// optional bytes attach_data = 20;
inline bool FileHasOfflineRsp::_internal_has_attach_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileHasOfflineRsp::has_attach_data() const {
  return _internal_has_attach_data();
}
inline void FileHasOfflineRsp::clear_attach_data() {
  _impl_.attach_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileHasOfflineRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileHasOfflineRsp.attach_data)
  return _internal_attach_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileHasOfflineRsp::set_attach_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.attach_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileHasOfflineRsp.attach_data)
}
inline std::string* FileHasOfflineRsp::mutable_attach_data() {
  std::string* _s = _internal_mutable_attach_data();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileHasOfflineRsp.attach_data)
  return _s;
}
inline const std::string& FileHasOfflineRsp::_internal_attach_data() const {
  return _impl_.attach_data_.Get();
}
inline void FileHasOfflineRsp::_internal_set_attach_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attach_data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileHasOfflineRsp::_internal_mutable_attach_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.attach_data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileHasOfflineRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileHasOfflineRsp.attach_data)
  if (!_internal_has_attach_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.attach_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileHasOfflineRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.attach_data_.SetAllocated(attach_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attach_data_.IsDefault()) {
    _impl_.attach_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileHasOfflineRsp.attach_data)
}

// -------------------------------------------------------------------

// FileAddOfflineReq

// required uint32 from_user_id = 1;
inline bool FileAddOfflineReq::_internal_has_from_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileAddOfflineReq::has_from_user_id() const {
  return _internal_has_from_user_id();
}
inline void FileAddOfflineReq::clear_from_user_id() {
  _impl_.from_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FileAddOfflineReq::_internal_from_user_id() const {
  return _impl_.from_user_id_;
}
inline uint32_t FileAddOfflineReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileAddOfflineReq.from_user_id)
  return _internal_from_user_id();
}
inline void FileAddOfflineReq::_internal_set_from_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.from_user_id_ = value;
}
inline void FileAddOfflineReq::set_from_user_id(uint32_t value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileAddOfflineReq.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool FileAddOfflineReq::_internal_has_to_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileAddOfflineReq::has_to_user_id() const {
  return _internal_has_to_user_id();
}
inline void FileAddOfflineReq::clear_to_user_id() {
  _impl_.to_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FileAddOfflineReq::_internal_to_user_id() const {
  return _impl_.to_user_id_;
}
inline uint32_t FileAddOfflineReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileAddOfflineReq.to_user_id)
  return _internal_to_user_id();
}
inline void FileAddOfflineReq::_internal_set_to_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.to_user_id_ = value;
}
inline void FileAddOfflineReq::set_to_user_id(uint32_t value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileAddOfflineReq.to_user_id)
}

// required string task_id = 3;
inline bool FileAddOfflineReq::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileAddOfflineReq::has_task_id() const {
  return _internal_has_task_id();
}
inline void FileAddOfflineReq::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileAddOfflineReq::task_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileAddOfflineReq.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileAddOfflineReq::set_task_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileAddOfflineReq.task_id)
}
inline std::string* FileAddOfflineReq::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileAddOfflineReq.task_id)
  return _s;
}
inline const std::string& FileAddOfflineReq::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void FileAddOfflineReq::_internal_set_task_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileAddOfflineReq::_internal_mutable_task_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileAddOfflineReq::release_task_id() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileAddOfflineReq.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileAddOfflineReq::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileAddOfflineReq.task_id)
}

// required string file_name = 4;
inline bool FileAddOfflineReq::_internal_has_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileAddOfflineReq::has_file_name() const {
  return _internal_has_file_name();
}
inline void FileAddOfflineReq::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileAddOfflineReq::file_name() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileAddOfflineReq.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileAddOfflineReq::set_file_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileAddOfflineReq.file_name)
}
inline std::string* FileAddOfflineReq::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileAddOfflineReq.file_name)
  return _s;
}
inline const std::string& FileAddOfflineReq::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileAddOfflineReq::_internal_set_file_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileAddOfflineReq::_internal_mutable_file_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileAddOfflineReq::release_file_name() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileAddOfflineReq.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.file_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileAddOfflineReq::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileAddOfflineReq.file_name)
}

// required uint32 file_size = 5;
inline bool FileAddOfflineReq::_internal_has_file_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileAddOfflineReq::has_file_size() const {
  return _internal_has_file_size();
}
inline void FileAddOfflineReq::clear_file_size() {
  _impl_.file_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t FileAddOfflineReq::_internal_file_size() const {
  return _impl_.file_size_;
}
inline uint32_t FileAddOfflineReq::file_size() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileAddOfflineReq.file_size)
  return _internal_file_size();
}
inline void FileAddOfflineReq::_internal_set_file_size(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.file_size_ = value;
}
inline void FileAddOfflineReq::set_file_size(uint32_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileAddOfflineReq.file_size)
}

// -------------------------------------------------------------------

// FileDelOfflineReq

// required uint32 from_user_id = 1;
inline bool FileDelOfflineReq::_internal_has_from_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileDelOfflineReq::has_from_user_id() const {
  return _internal_has_from_user_id();
}
inline void FileDelOfflineReq::clear_from_user_id() {
  _impl_.from_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FileDelOfflineReq::_internal_from_user_id() const {
  return _impl_.from_user_id_;
}
inline uint32_t FileDelOfflineReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileDelOfflineReq.from_user_id)
  return _internal_from_user_id();
}
inline void FileDelOfflineReq::_internal_set_from_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.from_user_id_ = value;
}
inline void FileDelOfflineReq::set_from_user_id(uint32_t value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileDelOfflineReq.from_user_id)
}

// required uint32 to_user_id = 2;
inline bool FileDelOfflineReq::_internal_has_to_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileDelOfflineReq::has_to_user_id() const {
  return _internal_has_to_user_id();
}
inline void FileDelOfflineReq::clear_to_user_id() {
  _impl_.to_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t FileDelOfflineReq::_internal_to_user_id() const {
  return _impl_.to_user_id_;
}
inline uint32_t FileDelOfflineReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileDelOfflineReq.to_user_id)
  return _internal_to_user_id();
}
inline void FileDelOfflineReq::_internal_set_to_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.to_user_id_ = value;
}
inline void FileDelOfflineReq::set_to_user_id(uint32_t value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:Bohan.File.FileDelOfflineReq.to_user_id)
}

// required string task_id = 3;
inline bool FileDelOfflineReq::_internal_has_task_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileDelOfflineReq::has_task_id() const {
  return _internal_has_task_id();
}
inline void FileDelOfflineReq::clear_task_id() {
  _impl_.task_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileDelOfflineReq::task_id() const {
  // @@protoc_insertion_point(field_get:Bohan.File.FileDelOfflineReq.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileDelOfflineReq::set_task_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bohan.File.FileDelOfflineReq.task_id)
}
inline std::string* FileDelOfflineReq::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:Bohan.File.FileDelOfflineReq.task_id)
  return _s;
}
inline const std::string& FileDelOfflineReq::_internal_task_id() const {
  return _impl_.task_id_.Get();
}
inline void FileDelOfflineReq::_internal_set_task_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDelOfflineReq::_internal_mutable_task_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FileDelOfflineReq::release_task_id() {
  // @@protoc_insertion_point(field_release:Bohan.File.FileDelOfflineReq.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileDelOfflineReq::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_id_.SetAllocated(task_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bohan.File.FileDelOfflineReq.task_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace File
}  // namespace Bohan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_File_2eproto
